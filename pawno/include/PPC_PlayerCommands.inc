// This command can be used to send messages like
// "/me is now afk" which becomes "* Player is now afk"
COMMAND:me(playerid, params[])
{
	// Setup local variables
	// 144 i/o message size limit - 24 name - 19 extra characters (see format) = 101
	new Action[101], Message[MAX_STRING_OUTPUT_TEXT], Name[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/me", params);

	if (sscanf(params, "s[128]", Action))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/me <Action>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if Action is in range of allowed characters
	if (strlen(params) > sizeof(Action))
	{
		format(Message, sizeof(Message), TXT_MessageTooLongWithLimit, sizeof(Action));
		return SendClientMessage(playerid, COLOR_SILVERCHALICE, Message);
	}

	GetPlayerName(playerid, Name, sizeof(Name));
	format(Message, sizeof(Message), "* %s %s {808080}( /me )", Name, Action);
	SendClientMessageToAll(COLOR_PALECANARY, Message);

	// Let the server know that this was a valid command
	return 1;
}



// This command allows players to send each other a private message
COMMAND:pm(playerid, params[])
{
	// Setup local variables
	// 144 i/o message size limit - 24 name - 18 extra characters + id (see format) = 102
	new OtherPlayer, Message[MAX_STRING_OUTPUT_TEXT], Name[MAX_PLAYER_NAME], Text[102];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/pm", params);

	if (sscanf(params, "us[128]", OtherPlayer, Text))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/pm <Player> <Message>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if OtherPlayer is playerid
	// which means the player tries to send a private message to himself... *lol*
	if (OtherPlayer == playerid)
		return SendClientMessage(playerid, COLOR_RED, TXT_NoPrivMessageToU);

	// Check if the player is not logged in
	if (APlayerData[OtherPlayer][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	// Check if the private message is in range
	if (strlen(Text) > sizeof(Text))
	{
		format(Message, sizeof(Message), TXT_MessageTooLongWithLimit, sizeof(Text));
		return SendClientMessage(playerid, COLOR_SILVERCHALICE, Message);
	}

	// Get the name of the receiver
	GetPlayerName(OtherPlayer, Name, sizeof(Name));
	// Construct the message that is sent to the sender
	format(Message, sizeof(Message), TXT_PrivMessageTo, Name, OtherPlayer, Text);
	SendClientMessage(playerid, COLOR_BIRDFLOWER, Message);

	// Get the name of the sender
	GetPlayerName(playerid, Name, sizeof(Name));
	
	// Construct the message that is sent to the receiver
	format(Message, sizeof(Message), TXT_PrivMessageFrom, Name, playerid, Text);
	SendClientMessage(OtherPlayer, COLOR_BIRDFLOWER, Message);

	// Play sound for receiver, will be played in the player's area
	// soundid: SOUND_ROULETTE_NO_CASH
	PlayerPlaySound(OtherPlayer, 1085, 0, 0, 0);

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player add new houses
COMMAND:createhouse(playerid, params[])
{
	// Setup local variables
	new Message[128], Price, MaxLevel, HouseID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/createhouse", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 5)
		return 0;

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	if (sscanf(params, "ii", Price, MaxLevel)) {
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/createhouse <Price> <Max Level (1-10)>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the player entered an invalid max level
	if (MaxLevel < 1 || MaxLevel > 10) {
		format(Message, sizeof(Message), TXT_HouseMaxLevelNotInRange, 1, 10);
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Find the first free HouseID
	for (HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
		if (AHouseData[HouseID][PickupID] == 0) // Check if an empty house-index has been found (PickupID is 0)
		    break; // Stop searching, the first free HouseID has been found now

    // Check if the house-limit has been reached yet
	if (HouseID > MAX_HOUSES) {
		format(Message, sizeof(Message), TXT_HouseMaxReached, MAX_HOUSES);
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

    // Setup local variables
	new Float:x, Float:y, Float:z;
	// Get the player's position
	GetPlayerPos(playerid, x, y, z);
	// Set default data
	AHouseData[HouseID][HouseX] = x;
	AHouseData[HouseID][HouseY] = y;
	AHouseData[HouseID][HouseZ] = z;
	AHouseData[HouseID][HouseLevel] = 1;
	AHouseData[HouseID][HouseMaxLevel] = MaxLevel;
	AHouseData[HouseID][HousePrice] = Price;
	AHouseData[HouseID][Owned] = false;

	// Add the pickup and 3DText at the location of the house-entrance (where the player is standing when he creates the house)
	House_CreateEntrance(HouseID);

	// Save the house
	HouseFile_Save(HouseID);

	// Inform the player that he created a new house
	format(Message, sizeof(Message), TXT_HouseCreated, HouseID);
	SendClientMessage(playerid, COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// This command lets the player delete a house
COMMAND:delhouse(playerid, params[])
{
	// Setup local variables
	new HouseID, file[100], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/delhouse", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 5)
		return 0;

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	if (sscanf(params, "i", HouseID))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/delhouse <HouseID>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the house does not exist
	if (AHouseData[HouseID][PickupID] == 0)
		return SendClientMessage(playerid, COLOR_RED, TXT_HouseIDNotFound);

	// Check if the house is owned
	if (AHouseData[HouseID][Owned] != false)
		return SendClientMessage(playerid, COLOR_RED, TXT_HouseIsOwned);

	// Check if the player is not in range of the house-pickup
	if (!IsPlayerInRangeOfPoint(playerid, 10, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
		return SendClientMessage(playerid, COLOR_RED, TXT_HouseNotInRange);

	// Clear all data of the house
    AHouseData[HouseID][HouseName] = 0;
    AHouseData[HouseID][Insurance] = 0;
    AHouseData[HouseID][HouseX] = 0.0;
    AHouseData[HouseID][HouseY] = 0.0;
    AHouseData[HouseID][HouseZ] = 0.0;
    AHouseData[HouseID][HouseLevel] = 0;
    AHouseData[HouseID][HouseMaxLevel] = 0;
    AHouseData[HouseID][HousePrice] = 0;
    AHouseData[HouseID][Owned] = false;
    AHouseData[HouseID][Owner] = 0;
    AHouseData[HouseID][HouseName] = 0;
    AHouseData[HouseID][HouseName] = 0;
    AHouseData[HouseID][HouseName] = 0;
	
	// Destroy the mapicon, 3DText and pickup for the house
	DestroyDynamicPickup(AHouseData[HouseID][PickupID]);
	DestroyDynamicMapIcon(AHouseData[HouseID][MapIconID]);
	DestroyDynamic3DTextLabel(AHouseData[HouseID][DoorText]);
    AHouseData[HouseID][PickupID] = 0;
    AHouseData[HouseID][MapIconID] = 0;

	// Delete the house-file
	format(file, sizeof(file), HouseFile, HouseID); // Construct the complete filename for this house-file
	if (fexist(file)) // Make sure the file exists
		fremove(file); // Delete the file

	// Also let the player know he deleted the house
	SendClientMessage(playerid, COLOR_GREEN, TXT_HouseDeleted);

	// Let the server know that this was a valid command
	return 1;
}



// This command lets the player buy a house when he is standing in
// range of a house that is not owned yet
COMMAND:buyhouse(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/buyhouse", params);

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	// Loop through all houses
	for (new HouseID = 1; HouseID < sizeof(AHouseData); HouseID++)
	{
		// Check if this house is created (it would have a valid pickup in front of the door)
		if (AHouseData[HouseID][PickupID] != 0)
		{
			// Check if the player is in range of the house-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
			{
				// Check if the house is not owned
				if (AHouseData[HouseID][Owned] == false)
				{
					// Check if the player can afford this house
					if (APlayerData[playerid][PlayerMoney] >= AHouseData[HouseID][HousePrice])
						// Give ownership of the house to the player if he can buy it
						return House_SetOwner(playerid, HouseID);
					else
						// Tell player that he can not afford to pay the house
						return SendClientMessage(playerid, COLOR_RED, TXT_CantAffordHouse);
				}
			}
		}
	}

	SendClientMessage(playerid, COLOR_RED, TXT_NoBuyableHouseInRange);

	// Let the server know that this was a valid command
	return 1;
}



// This command lets the player enter a property (house / business)
COMMAND:enter(playerid, params[])
{
	// Setup local variables
	new Level, BusType;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/enter", params);

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	// Loop through all houses
	for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
		// Check if this house exists
		if (AHouseData[HouseID][PickupID] != 0)
		{
			// Check if the player is in range of the house-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
			{
				// Check if the house is closed to the public
				// and if the player is not the owner
				if (AHouseData[HouseID][HouseOpened] == false && House_PlayerIsOwner(playerid, HouseID) == 0)
					return SendClientMessage(playerid, COLOR_RED, TXT_HouseIsNotOpened);

			    // Get the level of the house
				Level = AHouseData[HouseID][HouseLevel];
				
				// Set the worldid so other players cannot see him anymore
				SetPlayerVirtualWorld(playerid, 5000 + HouseID);
				
				// Set the player inside the interior of the house
				SetPlayerInterior(playerid, AHouseInteriors[Level][InteriorID]);
				
				// Set the position of the player at the spawn-location of the house's interior
				SetPlayerPos(playerid, AHouseInteriors[Level][IntX], AHouseInteriors[Level][IntY], AHouseInteriors[Level][IntZ]);
				
				// Also set a tracking-variable to enable /housemenu to track in which house the player is
				APlayerData[playerid][CurrentHouse] = HouseID;

				// Tell the owner that he can use /housemenu for more options
				if (House_PlayerIsOwner(playerid, HouseID) != 0)
					SendClientMessage(playerid, COLOR_GREEN, TXT_UseHousemenu);

				SendClientMessage(playerid, COLOR_GREEN, TXT_ExitToLeaveProperty);

				// Exit the function
				return 1;
			}
		}
	}

	// Loop through all businesses
	for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
	{
		// Check if the business exists
		if (ABusinessData[BusID][PickupID] != 0)
		{
			// Check if the player is in range of the business-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]))
			{
			    // Get the business-type
			    BusType = ABusinessData[BusID][BusinessType];
				// Set the worldid so other players cannot see him anymore
				SetPlayerVirtualWorld(playerid, 1000 + BusID);
				// Set the player inside the interior of the business
				SetPlayerInterior(playerid, ABusinessInteriors[BusType][InteriorID]);

				// Set the position of the player at the spawn-location of the business's interior
				SetPlayerPos(playerid, ABusinessInteriors[BusType][IntX], ABusinessInteriors[BusType][IntY], ABusinessInteriors[BusType][IntZ]);
				// Also set a tracking-variable to enable /busmenu to track in which business the player is
				APlayerData[playerid][CurrentBusiness] = BusID;
				// Tell the owner that he can use /busmenu for more options
				if (Business_PlayerIsOwner(playerid, BusID) != 0)
					SendClientMessage(playerid, COLOR_GREEN, TXT_UseBusmenu);

				SendClientMessage(playerid, COLOR_GREEN, TXT_ExitToLeaveProperty);

				// Exit the function
				return 1;
			}
		}
	}

	SendClientMessage(playerid, COLOR_RED, TXT_NoHouseOrBusinessToEnter);

	// Let the server know that this was a valid command
	return 1;
}



// This command lets the player exit from a property (house / business)
COMMAND:exit(playerid, params[])
{
	// Setup local variables
	new HouseID, BusID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/exit", params);

	// Check if the player is inside a building
	if (!IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAllowedInsideBuilding);

	// Check if the player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	HouseID = APlayerData[playerid][CurrentHouse];
	BusID = APlayerData[playerid][CurrentBusiness];

	// Check if the player is inside a house
	if (HouseID != 0)
		return House_Exit(playerid, HouseID);
	// Check if the player is inside a house
	else if (BusID != 0)
		return Business_Exit(playerid, BusID);

	// Tell the player that he is not in a house or business
	// and can not use the /exit command
	SendClientMessage(playerid, COLOR_RED, TXT_NoHouseOrBusToExit);

	// Let the server know that this was a valid command
	return 1;
}



// This command opens a menu when you're inside your house to allow to access the options of your house
COMMAND:housemenu(playerid, params[])
{
	// Setup local variables
	new OptionsList[200], DialogTitle[200];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/housemenu", params);

	// Check if the player is inside a building
	if (!IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAllowedInsideBuilding);

	// Check if the player is inside a house
	if (APlayerData[playerid][CurrentHouse] == 0)
		return SendClientMessage(playerid, COLOR_RED, TXT_NotInsideAHouse);

	format(DialogTitle, sizeof(DialogTitle), "%s %s", TXT_HouseMenuTitle, AHouseData[APlayerData[playerid][CurrentHouse]][HouseName]);

	format(OptionsList, sizeof(OptionsList), "%s%s\n", OptionsList, TXT_HouseMenuChangeHouseName);
	format(OptionsList, sizeof(OptionsList), "%s%s\n", OptionsList, TXT_HouseMenuUpgradeHouse);
	format(OptionsList, sizeof(OptionsList), "%s%s\n", OptionsList, TXT_HouseMenuBuyHouseVehicle);
	format(OptionsList, sizeof(OptionsList), "%s%s\n", OptionsList, TXT_HouseMenuBuyHouseVehicleInsurance);
	format(OptionsList, sizeof(OptionsList), "%s%s\n", OptionsList, TXT_HouseMenuSellHouseVehicle);
	// Check if the house is open
	if (AHouseData[APlayerData[playerid][CurrentHouse]][HouseOpened] != true)
		format(OptionsList, sizeof(OptionsList), "%s%s\n", OptionsList, TXT_HouseMenuOpenHouse);
	else
		format(OptionsList, sizeof(OptionsList), "%s%s\n", OptionsList, TXT_HouseMenuCloseHouse);
	format(OptionsList, sizeof(OptionsList), "%s%s\n", OptionsList, TXT_HouseMenuSellHouse);

	// Show the housemenu
	ShowPlayerDialog(playerid, DialogHouseMenu, DIALOG_STYLE_LIST, DialogTitle, OptionsList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	// Let the server know that this was a valid command
	return 1;
}



// This command allows a player to port a vehicle from his house to his location
COMMAND:getvehicle(playerid, params[])
{
	// Setup local variables
	new HouseList[1000], EmptySlot;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/getvehicle", params);

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	// Ask to which house the player wants to add his vehicle
	for (new i; i < MAX_HOUSESPERPLAYER; i++)
	{
		// Check if this houseindex is occupied
		if (APlayerData[playerid][Houses][i] != 0)
			format(HouseList, sizeof(HouseList), "%s{00FF00}%s (%i){FFFFFF}\n", HouseList, AHouseData[APlayerData[playerid][Houses][i]][HouseName], i);
		else {
			// If this slot is not in use count this variable
			EmptySlot++;
		}
	}

	// See if the variable EmptySlot does not equal
	// the maximum number of house-slots per player
	if (MAX_HOUSESPERPLAYER != EmptySlot)
		// If not, it means that there is atleast one occupied slot
		ShowPlayerDialog(playerid, DialogGetVehiclesSelectHouse, DIALOG_STYLE_LIST, TXT_GetVehicleTitle, HouseList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
	else
		// If yes, no slot is in use which means the player has no houses
		return SendClientMessage(playerid, COLOR_RED, TXT_NoHouseFound);

	// Let the server know that this was a valid command
	return 1;
}



// This command allowes a player to park his vehicle near his house
COMMAND:park(playerid, params[])
{
	// Setup local variables
	new Float:x, Float:y, Float:z, Float:rot, vid, HouseID, Message[128];
	new engine,lights,alarm,doors,bonnet,boot,objective;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/park", params);

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is inside a vehicle (he must be the driver)
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableAsDriver);

	// Get the vehicle-id
	vid = GetPlayerVehicleID(playerid);
	
	// Get the HouseID to which this vehicle belongs
	HouseID = AVehicleData[vid][BelongsToHouse];

	// Check if the vehicle is not owned (owner-check is not really required, as another
	// player would get kicked out very fast) AND it must belong to a house that the player owns
	if ((AVehicleData[vid][Owned] != true) || (HouseID == 0))
		return SendClientMessage(playerid, COLOR_RED, TXT_OwnVehicleCanBeParkedOnly);

	// Check if the vehicle is not in range of the house-entrance
	if (!IsPlayerInRangeOfPoint(playerid, ParkRange, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
	{
	    format(Message, sizeof(Message), TXT_NotInRangeOfHouse, ParkRange);
	    SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Get the player's position and angle
	GetVehiclePos(vid, x, y, z);
	GetVehicleZAngle(vid, rot);
	
	// Save those values for the vehicle
	AVehicleData[vid][SpawnX] = x;
	AVehicleData[vid][SpawnY] = y;
	AVehicleData[vid][SpawnZ] = z;
	AVehicleData[vid][SpawnRot] = rot;

	// Find the vehicle in the player's houses
	for (new i; i < MAX_HOUSESPERPLAYER; i++)
	{
		// Get the HouseID of the current house
	    HouseID = APlayerData[playerid][Houses][i];

		// Loop through all carslots of this house to find the vehicle-id
		for (new CarSlot; CarSlot < 10; CarSlot++)
		{
			// Check if this carslot holds the same vehicle-id
		    if (AHouseData[HouseID][VehicleIDs][CarSlot] == vid)
		    {
				// Re-create the vehicle at the same spot the player wants to park his vehicle
				House_ReplaceVehicle(HouseID, CarSlot);
				PutPlayerInVehicle(playerid, AHouseData[HouseID][VehicleIDs][CarSlot], 0);

				// Turn on the engine
				GetVehicleParamsEx(AHouseData[HouseID][VehicleIDs][CarSlot], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(AHouseData[HouseID][VehicleIDs][CarSlot], 1, lights, alarm, doors, bonnet, boot, objective);
				
				// Stop the for-loop
				break; 
			}
		}
	}

	// Let the player know he parked his vehicle
	SendClientMessage(playerid, COLOR_GREEN, TXT_VehicleParked);

	// Save the player-file (and his houses)
	PlayerFile_Save(playerid);

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player rent a vehicle
COMMAND:rentvehicle(playerid, params[])
{
	// Setup local variables
	new VehicleClassList[1000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/rentvehicle", params);

	// Check if the player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	// Check if the player is near a cardealerpickup
	for (new i; i < sizeof(ACarDealerPickups); i++)
	{
		// Check if a valid cardealerpickup is found
		if (ACarDealerPickups[i][PickupID] != 0)
		{
			// Check if the player is in range of the cardealerpickup
			if(IsPlayerInRangeOfPoint(playerid, 2.5, ACarDealerPickups[i][pux], ACarDealerPickups[i][puy], ACarDealerPickups[i][puz]))
			{
			    // Let the player choose a vehicle-class
				format(VehicleClassList, sizeof(VehicleClassList), "%s{00FF00}%s{FFFFFF}\n", VehicleClassList, "Bikes");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{40FF00}%s{FFFFFF}\n", VehicleClassList, "Boats");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{80FF00}%s{FFFFFF}\n", VehicleClassList, "Convertibles");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{B0FF00}%s{FFFFFF}\n", VehicleClassList, "Helicopters");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{FFFF00}%s{FFFFFF}\n", VehicleClassList, "Industrial vehicles");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{B0FF40}%s{FFFFFF}\n", VehicleClassList, "Low-riders");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{80FF80}%s{FFFFFF}\n", VehicleClassList, "Off-Road vehicles");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{40FFB0}%s{FFFFFF}\n", VehicleClassList, "Planes");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{00FFFF}%s{FFFFFF}\n", VehicleClassList, "Public Service vehicles");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{00B0FF}%s{FFFFFF}\n", VehicleClassList, "RC vehicles");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{0080FF}%s{FFFFFF}\n", VehicleClassList, "Saloon vehicles");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{0040FF}%s{FFFFFF}\n", VehicleClassList, "Sport vehicles");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{0000FF}%s{FFFFFF}\n", VehicleClassList, "Station wagons");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{4000FF}%s{FFFFFF}\n", VehicleClassList, "Trailers");
				format(VehicleClassList, sizeof(VehicleClassList), "%s{8000FF}%s{FFFFFF}\n", VehicleClassList, "Unique vehicles");
				
				// Ask which vehicle class the player wants to see to buy a vehicle
				ShowPlayerDialog(playerid, DialogRentVehicleClass, DIALOG_STYLE_LIST, "Select vehicle class:", VehicleClassList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
				
				// Exit the function
				return 1;
			}
		}
	}

	// The player is not in range of a cardealer
	SendClientMessage(playerid, COLOR_RED, TXT_CarDealerNotInRange);

	// Let the server know that this was a valid command
	return 1;
}



// This command teleports a player to his selected house
COMMAND:gohome(playerid, params[])
{
	// Setup local variables
	new HouseList[1000], EmptySlot;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/gohome", params);

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	// Check if the player has a wanted level
	if (GetPlayerWantedLevel(playerid) >= 1)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeInnocent);

	// Ask to which house the player wants to go
	for (new i; i < MAX_HOUSESPERPLAYER; i++)
	{
		// Check if this houseindex is occupied
		if (APlayerData[playerid][Houses][i] != 0)
			format(HouseList, sizeof(HouseList), "%s{00FF00}%s (%i){FFFFFF}\n", HouseList, AHouseData[APlayerData[playerid][Houses][i]][HouseName], i);
		else {
			// If this slot is not in use count this variable
			EmptySlot++;
		}
	}

	// See if the variable EmptySlot does not equal
	// the maximum number of house-slots per player
	if (MAX_HOUSESPERPLAYER != EmptySlot)
		// If not, it means that there is atleast one occupied slot
		ShowPlayerDialog(playerid, DialogGoHome, DIALOG_STYLE_LIST, TXT_GoHomeTitle, HouseList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
	else
		// If yes, no slot is in use which means the player has no houses
		return SendClientMessage(playerid, COLOR_RED, TXT_NoHouseFound);

	// Let the server know that this was a valid command
	return 1;
}



// Detaches the trailer from the vehicle
COMMAND:detach(playerid, params[])
{
	// Setup local variables
	new vid;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/detach", params);

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is inside a vehicle (he must be the driver)
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableAsDriver);

	// Get the vehicle-id
	vid = GetPlayerVehicleID(playerid);

	// Check if the vehicle has no trailer attached
	if (IsTrailerAttachedToVehicle(vid) != 1)
		return SendClientMessage(playerid, COLOR_RED, TXT_NoTrailerAttached);

	// Detach the trailer from the vehicle
	DetachTrailerFromVehicle(vid);

	// Send the player a message that the trailer has been detached
	SendClientMessage(playerid, COLOR_BLUE, TXT_TrailerDetached);

	// Let the server know that this was a valid command
	return 1;
}



// Puts the player's vehicle back onto his wheels
COMMAND:flip(playerid, params[])
{
	// Setup local variables
	new Float:x = 0.0, Float:y = 0.0, Float:z = 0.0, vid;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/flip", params);

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is inside a vehicle (he must be the driver)
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableAsDriver);

	// Get the vehicle-id
	vid = GetPlayerVehicleID(playerid);

	// Restore the camera for player
	SetCameraBehindPlayer(playerid);

	// Get the player's position
	GetPlayerPos(playerid, x, y, z);

	// Set the vehicle on the player's coordinates
	SetVehiclePos(vid, x, y, z);

	// Let the vehicle point north
	SetVehicleZAngle(vid, 0.0);

	// Send the player a message that the trailer has been detached
	SendClientMessage(playerid, COLOR_BLUE, TXT_VehicleFlipped);

	// Let the server know that this was a valid command
	return 1;
}



// Repairs the player's vehicle
COMMAND:repair(playerid, params[])
{
	// Setup local variables
	new vid;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/repair", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is inside a vehicle (he must be the driver)
	if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableInVehicle);

	// Get the vehicle-id
	vid = GetPlayerVehicleID(playerid);

	// Fully repair the vehicle (damage value and bodywork)
	RepairVehicle(vid);

	// Send the player a message to inform him that his vehicle has been repaired
	SendClientMessage(playerid, COLOR_BLUE, TXT_VehicleRepaired);

	// Let the server know that this was a valid command
	return 1;
}



// Repairs all vehicles
COMMAND:repairall(playerid, params[])
{
	// Setup local variables
	new Message[128], AdminName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/repairall", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 3)
		return 0;

	// Loop through all vehicles
	for (new i; i < MAX_VEHICLES; i++) {
		// Fully repair the vehicle (damage value and bodywork)
		RepairVehicle(i);
	}

	// Get the name of the admin
	GetPlayerName(playerid, AdminName, sizeof(AdminName));

	// Construct message and inform every player that an admin repaired all vehicles
	format(Message, sizeof(Message), TXT_AdminRepairedAllVehicles, AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName);
	SendClientMessageToAll(COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Heals all players
COMMAND:healall(playerid, params[])
{
	// Setup local variables
	new Message[128], AdminName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/healall", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 3)
		return 0;

	// Loop through all players
	for (new i; i < MAX_PLAYERS; i++) {
		// Set player health to 100%
		SetPlayerHealth(i, 100);
	}

	// Get the name of the admin
	GetPlayerName(playerid, AdminName, sizeof(AdminName));

	// Construct message and inform every player that an admin healed them all
	format(Message, sizeof(Message), TXT_AdminHealedAllPlayers, AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName);
	SendClientMessageToAll(COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player choose another class
COMMAND:reclass(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/reclass", params);
	
	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	// Check if the player has a wanted level
	if (GetPlayerWantedLevel(playerid) >= 1)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeInnocent);
	
	// Force the player back into class-selection
	ForceClassSelection(playerid);

	// Kill the player (required after ForceClassSelection)
	SetPlayerHealth(playerid, 0);

	// Let the server know that this was a valid command
	return 1;
}



// Starts a job
COMMAND:work(playerid, params[])
{
	// Setup local variables
	new vModel = GetVehicleModel(GetPlayerVehicleID(playerid));

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/work", params);

	// First check if the player already has a job
	if (APlayerData[playerid][JobStarted] != false)
		return SendClientMessage(playerid, COLOR_RED, TXT_AlreadyDoingAJob);

	// Check the player's class
	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver:
		{
			// Check if the player is the driver of a vehicle
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid, COLOR_RED, TXT_NotInsideATruckDriverVehicle);

			// Get the id of the convoy (if the player is in a convoy)
			new Convoy = APlayerData[playerid][ConvoyID];

			// Check if the player is part of a convoy AND is not the leader
			if ((APlayerData[playerid][InConvoy] == true) && (AConvoys[Convoy][Members][0] != playerid))
			{
				// Let the player know he's not the leader of his convoy and cannot start a job
				return SendClientMessage(playerid, COLOR_RED, TXT_NotTheLeaderOfConvoy);
			}

			// A convoy-leader proceeds here, and also a normal player (no convoy-member)

			// Check if the player is inside a valid trucking vehicle
			switch (vModel)
			{
				case VehicleFlatbed, VehicleDFT30, VehicleCementTruck: // Flatbed, DFT-30, CementTruck
				
				if (APlayerData[playerid][TruckerLicense] == 1) // Check if the player has acquired a truckers license
					ShowPlayerDialog(playerid, DialogTruckerJobMethod, DIALOG_STYLE_LIST, "Select method:", "Setup your own load and route\r\nAuto assigned load", TXT_DialogButtonSelect, TXT_DialogButtonCancel);
				else
					Trucker_StartRandomJob(playerid); // Start a random job

				// Player is driving a truck which needs a trailer
				case VehicleLineRunner, VehicleTanker, VehicleRoadTrain:
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) // Check if there is a trailer attached
						// Check if the player has acquired a truckers license
						if (APlayerData[playerid][TruckerLicense] == 1)
							ShowPlayerDialog(playerid, DialogTruckerJobMethod, DIALOG_STYLE_LIST, "Select method:", "Setup your own load and route\r\nAuto assigned load", TXT_DialogButtonSelect, TXT_DialogButtonCancel);
						else
							// Start a random job
							Trucker_StartRandomJob(playerid);
					else
						SendClientMessage(playerid, COLOR_RED, "You need a trailer to start a job");

				default: SendClientMessage(playerid, COLOR_RED, TXT_NotInsideATruckDriverVehicle);
			}
		}

		case ClassBusDriver:
		{
			// Check if the player is the driver of a vehicle
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid, COLOR_RED, TXT_NotInsideABusDriverVehicle);

			// Check if the player is inside a valid busdriver vehicle
			if (vModel == VehicleCoach) 
				// Check if the player has acquired a busdriver license
				if (APlayerData[playerid][BusLicense] == 1)
					ShowPlayerDialog(playerid, DialogBusJobMethod, DIALOG_STYLE_LIST, "Select method:", "Choose your own busroute\r\nAuto assigned busroute", TXT_DialogButtonSelect, TXT_DialogButtonCancel);
				else
					// Start a random job
					BusDriver_StartJob(playerid, random(sizeof(ABusRoutes)));
			else
				SendClientMessage(playerid, COLOR_RED, TXT_NotInsideABusDriverVehicle);
		}

		case ClassPilot:
		{
			// Check if the player is the driver of a vehicle
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid, COLOR_RED, TXT_NotInsideAPilotVehicle);

			// Check if the player is inside a valid piloting vehicle
			switch (vModel)
			{
				case VehicleShamal, VehicleNevada, VehicleMaverick, VehicleCargobob: // Plane (Shamal), Plane (Nevada), helicopter (Maverick)
				Pilot_StartRandomJob(playerid); // Start a random piloting job
				default: SendClientMessage(playerid, COLOR_RED, TXT_NotInsideAPilotVehicle);
			}
		}

		case ClassMafia:
		{
			// Check if the player is the driver of a vehicle
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid, COLOR_RED, TXT_NotInsideAMafiaVehicle);

			// Check if the player is inside a valid piloting vehicle
			switch (vModel)
			{
				case VehicleSandKing, VehicleMoonbeam: // Sangking, Moonbeam
				Mafia_StartRandomJob(playerid); // Start a random mafia job
				default: SendClientMessage(playerid, COLOR_RED, TXT_NotInsideAMafiaVehicle);
			}
		}

		case ClassCourier:
		{
			// Check if the player is the driver of a vehicle
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid, COLOR_RED, TXT_NotInsideACourierVehicle);

			// Check if the player is inside a valid courier vehicle
			switch (vModel)
			{
				case VehicleBurrito, VehicleFaggio, VehicleBenson: // Van (Burrito), bike (Faggio)
				Courier_StartJob(playerid); // Start a random courier job
				default: SendClientMessage(playerid, COLOR_RED, TXT_NotInsideACourierVehicle);
			}
		}

		case ClassRoadWorker:
		{
			// Check if the player is the driver of a vehicle
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid, COLOR_RED, TXT_NotInsideARoadWorkerVehicle);

			// Check if the player is inside a valid courier vehicle
			switch (vModel)
			{
				case VehicleUtilityVan, VehicleTowTruck: // Utility Van, Towtruck
				Roadworker_StartRandomJob(playerid); // Start a random roadworker job
				default: SendClientMessage(playerid, COLOR_RED, TXT_NotInsideARoadWorkerVehicle);
			}
		}
		default: return 0;
	}

	// Let the server know that this was a valid command
	return 1;
}



// Stops the current job
COMMAND:stopwork(playerid, params[])
{
	// Setup local variables
	new Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/stopwork", params);

	// First check if the player already has a job
	if (APlayerData[playerid][JobStarted] != true)
		return SendClientMessage(playerid, COLOR_RED, TXT_NotDoingAJob);

    // Check the class of the player
	switch (APlayerData[playerid][PlayerClass])
	{
		// Stop any job related to the player's class
		case ClassTruckDriver: Trucker_EndJob(playerid);
		case ClassBusDriver: BusDriver_EndJob(playerid);
		case ClassPilot: Pilot_EndJob(playerid);
		case ClassMafia: Mafia_EndJob(playerid);
		case ClassCourier: Courier_EndJob(playerid);
		case ClassRoadWorker: Roadworker_EndJob(playerid);
		default: return 0;
	}

	// Construct message and inform player that he has to pay
	// for the expenses as he failed to do his job
	
	// by GameText
	format(Message, sizeof(Message), TXT_FailedMission, PRICE_FAILED_JOB);
	GameTextForPlayer(playerid, Message, 5000, 4);

	// by Chat Message
	format(Message, sizeof(Message), TXT_FailedMissionCM, PRICE_FAILED_JOB);
	SendClientMessage(playerid, COLOR_WHITE, Message);

	// Finally reduce the expensive costs
	RewardPlayer(playerid, -PRICE_FAILED_JOB, 0);

	// Let the server know that this was a valid command
	return 1;
}



// Displays the player's coordinates on the map
COMMAND:loc(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/loc", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 3)
		return 0;

	// Setup some local variables
	new Message[200], Float:x, Float:y, Float:z, Float:rot, Interior, World;
	// Get the player's position
	GetPlayerPos(playerid, x, y, z);
	// Check if the player is on foot or in a vehicle
	if (GetPlayerVehicleSeat(playerid) == -1)
		GetPlayerFacingAngle(playerid, rot); // Get the player's angle
	else
		GetVehicleZAngle(GetPlayerVehicleID(playerid), rot);

	// Get the interior where the player is located
	Interior = GetPlayerInterior(playerid);
	// Get the virtual world of the player
	World = GetPlayerVirtualWorld(playerid);
	// combine the position and angle into a proper message
	format(Message, sizeof(Message), "Location: X=%4.2f, Y=%4.2f, Z=%4.2f, rotation=%4.2f, interior=%i, world=%i", x, y, z, rot, Interior, World);
	// Send the message with the coordinates and the angle of the player
	SendClientMessage(playerid, COLOR_RED, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player choose where he wants to respawn (costs $200)
COMMAND:gobase(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/gobase", params);

	// Check if player is not on foot
	//
	// Make sure you can't use "/gobase" when you're inside a vehicle (doesn't respawn you at the requested coords
	// and puts a random item (bottle, sigarette, ...) in the player's hands
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	// Check if player has a wanted level
	if (GetPlayerWantedLevel(playerid) != 0)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeInnocent);

	// Check if player is not doing a job
	if (APlayerData[playerid][JobStarted] != false)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyIfNotDoingAJob);

	// Check if player is not jailed
	if (APlayerData[playerid][PlayerJailed] != 0)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyIfNotJailed);

	// Create a dialog based on the player's class
	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver: // Ask where the trucker player wants to respawn
			ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Choose trucker spawn point:", "Fallen Tree Depot\r\nFlint Trucking Depot\r\nLVA Freight Depot\r\nDoherty Depot\r\nEl Corona Depot\r\nLas Payasdas Depot\r\nQuarry Top\r\nShady Creek Depot", "Spawn", TXT_DialogButtonCancel);
		case ClassBusDriver: // Ask where the busdriver wants to respawn
			ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Choose busdriver spawn point:", "Los Santos\r\nSan Fierro\r\nLas Venturas", "Spawn", TXT_DialogButtonCancel);
		case ClassPilot: // Ask where the pilot wants to respawn
			ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Choose pilot spawn point:", "Los Santos\r\nSan Fierro\r\nLas Venturas", "Spawn", TXT_DialogButtonCancel);
		case ClassPolice: // Ask where the police player wants to respawn
			ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Choose police spawn point:", "Los Santos\r\nSan Fierro\r\nLas Venturas", "Spawn", TXT_DialogButtonCancel);
		case ClassCourier: // Ask where the courier player wants to respawn
			ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Choose courier spawn point:", "Los Santos\r\nSan Fierro\r\nLas Venturas", "Spawn", TXT_DialogButtonCancel);
	}

	// Let the server know that this was a valid command
	return 1;
}



// Sets the player's wanted level
COMMAND:setwanted(playerid, params[])
{
	new OtherPlayer, Stars, Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setwanted", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 2)
		return 0;

	if (sscanf(params, "ui", OtherPlayer, Stars))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/setwanted <Player> <Stars (0-6)>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the player is not logged in
	if (APlayerData[OtherPlayer][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	if ((Stars < 0) || (Stars > 6))
		return SendClientMessage(playerid, COLOR_RED, TXT_InvalidWantedLevel);

	SetPlayerWantedLevel(OtherPlayer, Stars);
	SendClientMessage(OtherPlayer, COLOR_BLUE, "Your wanted level has been set by an admin");

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player choose a motorcycle to spawn
COMMAND:bike(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/bike", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	// Check if player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	// Ask which motorcycle the player wants to have
	ShowPlayerDialog(playerid, DialogBike, DIALOG_STYLE_LIST, "Choose a motorcycle:", "Bike\r\nBMX\r\nMountain Bike\r\nFaggio\r\nPizzaboy\r\nBF-400\r\nNRG-500\r\nPCJ-600\r\nFCR-900\r\nFreeway\r\nWayfarer\r\nSanchez\r\nQuad", "Spawn", TXT_DialogButtonCancel);

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player choose a car to spawn (in a split list which shows only 10 cars at a time)
COMMAND:car(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/car", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	// Check if player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	CarList_Create(playerid); // Create a list of cars (only the first 10 cars) and show the dialog so the player can choose a car

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player choose a plane to spawn (in a split list which shows only 10 planes at a time)
COMMAND:plane(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/plane", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	// Check if player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	PlaneList_Create(playerid); // Create a list of planes (only the first 10 planes) and show the dialog so the player can choose a plane

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player choose a trailer to spawn (in a split list which shows only 10 trailers at a time)
COMMAND:trailer(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/trailer", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	// Check if player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	TrailerList_Create(playerid); // Create a list of trailers (only the first 10 trailers) and show the dialog so the player can choose a trailer

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player choose a boat to spawn
COMMAND:boat(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/boat", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	// Check if player is not on foot
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, TXT_MustBeOnFoot);

	ShowPlayerDialog(playerid, DialogBoat, DIALOG_STYLE_LIST, "Choose a boat:", "Coastguard\nDinghy\nJetmax\nLaunch\nMarquis\nPredator\nReefer\nSpeeder\nSquallo\nTropic", "Spawn", TXT_DialogButtonCancel);

	// Let the server know that this was a valid command
	return 1;
}



// Jail a player
COMMAND:jail(playerid, params[])
{
	new PlayerToJail, Seconds, Reason[MAX_STRING_INPUT_TEXT], Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/jail", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	if (sscanf(params, "uis[128]", PlayerToJail, Seconds, Reason))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/jail <Player> <Seconds> <Reason>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the player is not logged in
	if (APlayerData[PlayerToJail][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	// Check if given player is not jailed
	if (APlayerData[PlayerToJail][PlayerJailed] != 0)
		return SendClientMessage(playerid, COLOR_RED, TXT_PlayerAlreadyJailed);

	// Check if duration of seconds is atleast 1
	if (Seconds < 1)
		return SendClientMessage(playerid, COLOR_RED, TXT_MinimumSecondsMustBeOne);

	// Jail the player
	Police_JailPlayer(PlayerToJail, Seconds);
	// Get the name of the player who jailed the player
	GetPlayerName(playerid, AdminName, sizeof(AdminName));
	// Get the name of the player who's being sent to jail
	GetPlayerName(PlayerToJail, Name, sizeof(Name));
	// Send the jailed player a message who jailed him, why he's been jailed and how long
	format(Message, sizeof(Message), TXT_JailedByAdmin, AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName, Seconds);
	SendClientMessage(PlayerToJail, COLOR_RED, Message);
	format(Message, sizeof(Message), TXT_GivenReason, Reason);
	SendClientMessage(PlayerToJail, COLOR_RED, Message);

	// Send confirmation about jailed player to Admin
	format(Message, sizeof(Message), TXT_JailedByAdminConfirmation, Name, Seconds);
	SendClientMessage(playerid, COLOR_WHITE, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Unjail a player
COMMAND:unjail(playerid, params[])
{
	new PlayerToUnjail, Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/unjail", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	if (sscanf(params, "u", PlayerToUnjail))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/unjail <Player>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the player is not logged in
	if (APlayerData[PlayerToUnjail][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	// Check if given player is jailed
	if (APlayerData[PlayerToUnjail][PlayerJailed] == 0)
		return SendClientMessage(playerid, COLOR_RED, TXT_PlayerNotJailed);

	// Release player from jail
	APlayerData[playerid][PlayerJailed] = 0;
	ReleasePlayerFromJail(PlayerToUnjail);
	// Get the name of the player who unjailed the player
	GetPlayerName(playerid, AdminName, sizeof(AdminName));
	// Get the name of the unjailed player
	GetPlayerName(PlayerToUnjail, Name, sizeof(Name));
	// Send the jailed player a message who jailed him, why he's been jailed and how long
	format(Message, sizeof(Message), TXT_UnJailedByAdmin, AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName);
	SendClientMessage(PlayerToUnjail, COLOR_GREEN, Message);

	// Send confirmation about unjailed player to Admin
	format(Message, sizeof(Message), TXT_UnJailedByAdminConfirmation, Name);
	SendClientMessage(playerid, COLOR_WHITE, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Warn a player
COMMAND:warn(playerid, params[])
{
	new PlayerToWarn, Reason[MAX_STRING_INPUT_TEXT], Message[128], Name[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/warn", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	if (sscanf(params, "us[128]", PlayerToWarn, Reason))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/warn <Player> <Reason>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the player is not logged in
	if (APlayerData[PlayerToWarn][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	// Increase the number of warnings
	APlayerData[PlayerToWarn][Warnings]++;

	// Get the name of the player who warned the player
	GetPlayerName(playerid, Name, sizeof(Name));
	// Send the warned player a message who warned him and why he's been warned
	format(Message, sizeof(Message), TXT_WarnedBy, AdminLevelName[APlayerData[playerid][PlayerLevel]], Name);
	SendClientMessage(PlayerToWarn, COLOR_RED, Message);
	format(Message, sizeof(Message), TXT_GivenReason, Reason);
	SendClientMessage(PlayerToWarn, COLOR_RED, Message);
	format(Message, sizeof(Message), TXT_GTWarningShow, APlayerData[PlayerToWarn][Warnings], AutoKickWarnings, Reason);
	GameTextForPlayer(PlayerToWarn, Message, 5000, 4);

	// Get the name of the warned player
	GetPlayerName(PlayerToWarn, Name, sizeof(Name));
	// Let the admin know who has been warned and why
	format(Message, sizeof(Message), TXT_WarnedAdminConfirmation, Name, APlayerData[PlayerToWarn][Warnings], AutoKickWarnings);
	SendClientMessage(playerid, COLOR_GREEN, Message);
	format(Message, sizeof(Message), TXT_GivenReason, Reason);
	SendClientMessage(playerid, COLOR_RED, Message);

	// Automatically kick the player if he got 3 warnings (if autokick is enabled) and inform the player about that
	if ((APlayerData[PlayerToWarn][Warnings] == AutoKickWarnings) && (AutoKickAfterWarn == 1))
	{
		format(Message, sizeof(Message), TXT_AutoKickedByWarnings, AutoKickWarnings);
		SendClientMessage(PlayerToWarn, COLOR_RED, Message);

		SetTimerEx("TimedKick", (750 + GetPlayerPing(PlayerToWarn)), false, "i", PlayerToWarn);
	}

	// Let the server know that this was a valid command
	return 1;
}



// Kicks a player with a reason
COMMAND:kick(playerid, params[])
{
	new PlayerToKick, Reason[MAX_STRING_INPUT_TEXT], Message[128], Name[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/kick", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	if (sscanf(params, "us[128]", PlayerToKick, Reason))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/kick <Player> <Reason>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the player is not logged in
	if (APlayerData[PlayerToKick][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	// Get the name of the player who warned the player
	GetPlayerName(playerid, Name, sizeof(Name));
	
	// Send the warned player a message who kicked him and why he's been kicked
	format(Message, sizeof(Message), TXT_KickedBy, AdminLevelName[APlayerData[playerid][PlayerLevel]], Name);
	SendClientMessage(PlayerToKick, COLOR_RED, Message);
	format(Message, sizeof(Message), TXT_GivenReason, Reason);
	SendClientMessage(PlayerToKick, COLOR_RED, Message);

	// Send a confirmation about the kick to the corresponding admin
	format(Message, sizeof(Message), TXT_KickAdminConfirmation, Name, Reason);
	SendClientMessage(PlayerToKick, COLOR_RED, Message);
	
	// Kick the player
	SetTimerEx("TimedKick", (750 + GetPlayerPing(PlayerToKick)), false, "i", PlayerToKick);

	// Let the server know that this was a valid command
	return 1;
}



// Bans a player for x days
COMMAND:ban(playerid, params[])
{
	// Setup local variables
	new PlayerToBan, Days, Reason[MAX_STRING_INPUT_TEXT], TotalBanTime, Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/ban", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 3)
		return 0;

	if (sscanf(params, "uis[128]", PlayerToBan, Days, Reason))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/ban <Player> <Days> <Reason>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the player is not logged in
	if (APlayerData[PlayerToBan][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	// Check if duration of days is atleast 1
	if (Days < 1)
		return SendClientMessage(playerid, COLOR_RED, TXT_MinimumDaysMustBeOne);

	// Get the names of the player and the admin who executed the ban
	GetPlayerName(playerid, AdminName, sizeof(AdminName));
	GetPlayerName(PlayerToBan, Name, sizeof(Name));

	// Increase the number of bans
	APlayerData[PlayerToBan][Bans]++;

	// Calculate the total bantime (when the player can login again)
	TotalBanTime = (Days * 86400) + gettime();

	// Check if this is the player's maximum ban
	if (APlayerData[PlayerToBan][Bans] >= MAX_BANS) {
		// Make the ban permanent
		APlayerData[PlayerToBan][BanTime] = 2147483640;

		// Inform the player about his permanent ban
		format(Message, sizeof(Message), TXT_BannedPermanentlyBy, MAX_BANS, AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName);
		SendClientMessage(PlayerToBan, COLOR_RED, Message);
	}
	else
	{
		// Store this value for the player
		APlayerData[PlayerToBan][BanTime] = TotalBanTime;

		// Inform the player about his ban
		format(Message, sizeof(Message), TXT_BannedBy, AdminName, Days);
		SendClientMessage(PlayerToBan, COLOR_RED, Message);
		format(Message, sizeof(Message), TXT_GivenReason, Reason);
		SendClientMessage(PlayerToBan, COLOR_RED, Message);
	}

	// Kick the player (his data will be saved)
	SetTimerEx("TimedKick", (750 + GetPlayerPing(PlayerToBan)), false, "i", PlayerToBan);

	// Inform everybody else which player was banned and for how long
	format(Message, sizeof(Message), "%s %s has banned %s for %i days", AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName, Name, Days);
	SendClientMessageToAll(COLOR_GRAY, Message);

	return 1;
}



// Unbans a player (cleares the ban-time)
COMMAND:unban(playerid, params[])
{
	// Setup local variables
	new PlayerToUnban[MAX_PLAYER_NAME], Message[128], Name[MAX_PLAYER_NAME];
	new file[100], File:PFile, LineForFile[100];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/unban", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 3)
		return 0;

	if (sscanf(params, "s[24]", PlayerToUnban))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/unban <Player>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Get the name of the admin
	GetPlayerName(playerid, Name, sizeof(Name));

	// Construct the complete filename for this player's account
	format(file, sizeof(file), PlayerFile, PlayerToUnban);

	// Check if the file does not exist
	if (!fexist(file))
		return SendClientMessage(playerid, COLOR_RED, TXT_PlayerAccountNotFound);

	// Open the playerfile for appending (this command only appends a new line to overwrite the bantime)
	PFile = fopen(file, io_append);
	// Construct the line: "BanTime <0>"
	format(LineForFile, sizeof(LineForFile), "BanTime 0\r\n");
	// And save it to the file
	fwrite(PFile, LineForFile);
	// Close the file
	fclose(PFile);

	// Inform everybody else which player was unbanned
	format(Message, sizeof(Message), "%s %s has un-banned %s", AdminLevelName[APlayerData[playerid][PlayerLevel]], Name, PlayerToUnban);
	SendClientMessageToAll(COLOR_GRAY, Message);

	return 1;
}



// Spawns the object at the location given by the player
COMMAND:createobject(playerid, params[])
{
	// Setup local variables
	new ObjectModel, ObjID, Message[128], Float:x, Float:y, Float:z, Float:Angle;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/createobject", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 5)
		return 0;

	if (sscanf(params, "iffff", ObjectModel, x, y, z, Angle))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/createobject <Object Model ID> <x> <y> <z> <Angle>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Spawn the object 5 units north of the player
	ObjID = CreateObject(ObjectModel, x, y, z, 0.0, 0.0, Angle, 250.0);
	
	// Inform the player about it
	format(Message, sizeof(Message), TXT_ObjectCreated, ObjID, ObjectModel, x, y, z);
	SendClientMessage(playerid, COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Deletes the given object from the game
COMMAND:delobject(playerid, params[])
{
	// Setup local variables
	new oID, Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/delobject", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 5)
		return 0;

	if (sscanf(params, "i", oID))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/delobject <Object ID>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if object id exists
	if (!IsValidObject(oID))
		return SendClientMessage(playerid, COLOR_RED, TXT_ObjectNotExist);

	// Destroy the given object
	DestroyObject(oID);

	// Inform the player about it
	format(Message, sizeof(Message), TXT_ObjectDeleted, oID);
	SendClientMessage(playerid, COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Spawns the pickup at the location given by the player
COMMAND:createpickup(playerid, params[])
{
	// Setup local variables
	new PickupModel, PickID, Message[128], Float:x, Float:y, Float:z, PickupType;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/createpickup", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 5)
		return 0;

	if (sscanf(params, "ifffi", PickupModel, x, y, z, PickupType))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/createpickup <Pickup Model ID> <x> <y> <z> <Type>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Spawn the pickup
	PickID = CreatePickup(PickupModel, PickupType, x, y, z, -1);

	// Inform the player about it
	format(Message, sizeof(Message), TXT_PickupCreated, PickID, PickupModel, x, y, z);
	SendClientMessage(playerid, COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Deletes the given pickup from the game
COMMAND:delpickup(playerid, params[])
{
	// Setup local variables
	new pID, Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/delpickup", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 5)
		return 0;

	if (sscanf(params, "i", pID))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/delpickup <Pickup ID>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if pickup id exists
	if (!IsValidObject(pID))
		return SendClientMessage(playerid, COLOR_RED, TXT_PickupNotExist);

	// Destroy the given pickup
	DestroyPickup(pID);

	// Inform the player about it
	format(Message, sizeof(Message), TXT_PickupDeleted, pID);
	SendClientMessage(playerid, COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Ports the player to the given coordinates
COMMAND:portloc(playerid, params[])
{
	// Setup local variables
	new Float:x, Float:y, Float:z, Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/portloc", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	// Check if the player is in jail
	if (APlayerData[playerid][PlayerJailed] != 0)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyIfNotJailed);

	if (sscanf(params, "fff", x, y, z))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/portloc <x> <y> <z>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Port the player to the given location
	SetPlayerPos(playerid, x, y, z);
	
	// Let the player know about it
	format(Message, sizeof(Message), TXT_AdminTeleportToLoc, x, y, z);
	SendClientMessage(playerid, COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Ports the player to the given player
COMMAND:port(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Name[MAX_PLAYER_NAME], Float:x, Float:y, Float:z, Message[128], IntID, WorldID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/port", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	if (sscanf(params, "u", OtherPlayer))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/port <Player>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the player is not logged in
	if (APlayerData[OtherPlayer][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	// Check if admin is in jail
	if (APlayerData[playerid][PlayerJailed] == 0)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_CmdOnlyIfNotJailed);

	// Check if the player is jailed
	if (APlayerData[OtherPlayer][PlayerJailed] == 0)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerIsJailed);

	// Get the location of the other player
	GetPlayerPos(OtherPlayer, x, y, z);
	IntID = GetPlayerInterior(OtherPlayer);
	WorldID = GetPlayerVirtualWorld(OtherPlayer);

	// Port the player to the given location
	SetPlayerPos(playerid, x, y, z + 3.0);
	SetPlayerInterior(playerid, IntID);
	SetPlayerVirtualWorld(playerid, WorldID);	

	// Let the player know about it
	format(Message, sizeof(Message), TXT_AdminTeleportToPlayer, Name, x, y, z + 3.0);
	SendClientMessage(playerid, COLOR_RED, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Ports one player to another player
COMMAND:tele(playerid, params[])
{
	// Setup local variables
	new Player, OtherPlayer, Float:x, Float:y, Float:z, Message[128], IntID, WorldID, NamePlayer[MAX_PLAYER_NAME], OtherPlayerName[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/tele", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	if (sscanf(params, "uu", Player, OtherPlayer))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/tele <Player 1> <Player 2>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if Player is not logged in
	if (APlayerData[Player][LoggedIn] != true)
	{
		format(Message, sizeof(Message), TXT_PlayerNotLoggedInWithName, "Player1");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if Player and OtherPlayer are equal
	if (Player == OtherPlayer)
		return SendClientMessage(playerid, COLOR_RED, Message);

	// Check if OtherPlayer is not logged in
	if (APlayerData[OtherPlayer][LoggedIn] != true)
	{
		format(Message, sizeof(Message), TXT_PlayerNotLoggedInWithName, "Player2");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if Player is jailed
	if (APlayerData[Player][PlayerJailed] == 0) {
		format(Message, sizeof(Message), TXT_PlayerIsJailedWithName, "Player1");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if OtherPlayer is jailed
	if (APlayerData[OtherPlayer][PlayerJailed] == 0) {
		format(Message, sizeof(Message), TXT_PlayerIsJailedWithName, "Player2");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Get the names of the players and the admin
	GetPlayerName(playerid, AdminName, sizeof(AdminName));
	GetPlayerName(Player, NamePlayer, sizeof(NamePlayer));
	GetPlayerName(OtherPlayer, OtherPlayerName, sizeof(OtherPlayerName));

	// Get the location of the second player
	GetPlayerPos(OtherPlayer, x, y, z);
	IntID = GetPlayerInterior(OtherPlayer);
	WorldID = GetPlayerVirtualWorld(OtherPlayer);

	// Port Player to OtherPlayer's location
	SetPlayerVirtualWorld(Player, WorldID);
	SetPlayerInterior(Player, IntID);
	SetPlayerPos(Player, x, y, z + 3.0);

	// Let Player know he has been ported
	format(Message, sizeof(Message), TXT_PortedToOtherPlayerLoc, OtherPlayer, AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName);
	SendClientMessage(Player, COLOR_WHITE, Message);

	// Let OtherPlayer know Player has been ported to him
	format(Message, sizeof(Message), TXT_PlayerPortedToYou, NamePlayer, AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName);
	SendClientMessage(Player, COLOR_WHITE, Message);

	// Let admin know Player has been ported to OtherPlayer
	format(Message, sizeof(Message), TXT_AdminPlayerTeleportedToOtherPlayer, NamePlayer, OtherPlayerName, x, y, z);
	SendClientMessage(Player, COLOR_WHITE, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Ports the player to the given vehicle
COMMAND:portvehicle(playerid, params[])
{
	// Setup local variables
	new Vehicle, Float:x, Float:y, Float:z, Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/portvehicle", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	// Check for invalid command syntax
	if (sscanf(params, "i", Vehicle))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/portvehicle <Vehicle ID>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the vehicle does not exist
	if (AVehicleData[Vehicle][Model] == 0)
		return SendClientMessage(playerid, COLOR_RED, TXT_VehicleDoesNotExist);

	// Check if the vehicle has been clamped
	if (AVehicleData[Vehicle][Clamped] == true)
		return SendClientMessage(playerid, COLOR_RED, TXT_VehicleClamped);

	// Get the location of the vehicle
	GetVehiclePos(Vehicle, x, y, z);

	// Port the player to the given location
	SetPlayerPos(playerid, x, y, z + 3.0);

	// Let the player know about it
	format(Message, sizeof(Message), TXT_AdminTeleportToLoc, x, y, z + 3.0);
	SendClientMessage(playerid, COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Sets the admin-level of another player
COMMAND:setlevel(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Level, Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME], OldLevel;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setlevel", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 5)
		return 0;

	// Check for invalid command syntax
	if (sscanf(params, "ui", OtherPlayer, Level))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/setlevel <Player> <AdminLevel>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if OtherPlayer equals playerid
	if (OtherPlayer == playerid)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_CantPerformActionOnYourself);

	// Check if the player is not logged in
	if (APlayerData[OtherPlayer][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	if ((0 > Level) || (5 < Level))
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_InvalidAdminLevel);

	// Get the old level of the other player
	OldLevel = APlayerData[OtherPlayer][PlayerLevel];

	if (APlayerData[OtherPlayer][PlayerLevel] == Level)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_AdminLevelNotChanged);

	// Get the playername of the admin
	GetPlayerName(playerid, AdminName, sizeof(AdminName));

	// Also get the name of the player that has been promoted
	GetPlayerName(OtherPlayer, Name, sizeof(Name));

	// Store the level of the player
	APlayerData[OtherPlayer][PlayerLevel] = Level;

	// Determine whether the player has been promoted or demoted
	if (OldLevel < Level)
		format(Message, sizeof(Message), TXT_PlayerPromoted, Name, AdminLevelName[Level], AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName);
	if (OldLevel > Level)
		format(Message, sizeof(Message), TXT_PlayerDemoted, Name, AdminLevelName[Level], AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName);

	// Let all players know about it
	SendClientMessageToAll(COLOR_GREEN, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Refuel the player's vehicle
COMMAND:fuel(playerid, params[])
{
	// Setup local variables
	new vID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/fuel", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 1)
		return 0;

	// Check if the player is inside a building
	if (IsPlayerInsideABuilding(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdNotAllowedInsideBuilding);

	// Check if the player is inside a vehicle (he must be the driver)
	if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableInVehicle);

	// Get the vehicleid
	vID = GetPlayerVehicleID(playerid);

	// Refuel the vehicle
	AVehicleData[vID][Fuel] = MaxFuel;

	// Let the player know about it
	SendClientMessage(playerid, COLOR_GREEN, TXT_VehicleRefuelled);

	// Let the server know that this was a valid command
	return 1;
}



// Let the player use a jetpack
COMMAND:jetpack(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/jetpack", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 3)
		return 0;

	// Equip the player with a jetpack
	SetPlayerSpecialAction(playerid, 2);

	// Let the server know that this was a valid command
	return 1;
}



// Paints a car with a paintjob
COMMAND:paint(playerid, params[])
{
	// Setup local variables
	new PaintjobID, vid, Message[128], Name[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/paint", params);

	if (sscanf(params, "i", PaintjobID))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/paint <Paintjob ID (0-2)>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if the player is inside a vehicle (he must be the driver)
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableAsDriver);

	if ((PaintjobID < 0) || (PaintjobID > 2))
		return SendClientMessage(playerid, COLOR_RED, TXT_InvalidPaintJobID);

	// Get players name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Get the vehicle-id
	vid = GetPlayerVehicleID(playerid);

	// Check if the player is not the owner of the vehicle
	// and if the player is not an admin
	if ((strcmp(Name, AVehicleData[vid][Owner]) != 0 || isnull(AVehicleData[vid][Owner])) && (APlayerData[playerid][PlayerLevel] == 0))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyOnOwnVehicles);

	// Change the paintjob of the player's vehicle
	ChangeVehiclePaintjob(vid, PaintjobID);

	// Also save the paintjob for the vehicle
	AVehicleData[vid][PaintJob] = PaintjobID + 1;

	// Also set the vehiclecolor to 1 (white), so the paintjob has it's full color
	ChangeVehicleColor(vid, 1, 1);

	// Also save the colors for the vehicle
	AVehicleData[vid][Color1] = 1;
	AVehicleData[vid][Color2] = 1;

	// Let the player pay for the paintjob
	RewardPlayer(playerid, -PRICE_PAINT_JOB, 0);

	// Inform the player about it
	format(Message, sizeof(Message), TXT_VehPaintJobPaid, PRICE_PAINT_JOB);
	SendClientMessage(playerid, COLOR_GREEN, Message);

	// Save the player-file (along with the houses and businesses)
	PlayerFile_Save(playerid);

	// Let the server know that this was a valid command
	return 1;
}



// Re-colors the given vehicle (lets you choose the first color)
COMMAND:color1(playerid, params[])
{
	// Setup local variables
	new ColorList[1000], Name[MAX_PLAYER_NAME], vid;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/color1", params);

	// Check if the player is inside a vehicle (he must be the driver)
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableAsDriver);

	// Get players name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Get the vehicle-id
	vid = GetPlayerVehicleID(playerid);

	// Check if the player is not the owner of the vehicle
	// and if the player is not an admin
	if ((strcmp(Name, AVehicleData[vid][Owner]) != 0 || isnull(AVehicleData[vid][Owner])) && (APlayerData[playerid][PlayerLevel] == 0))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyOnOwnVehicles);

	// Construct the colorlist
	format(ColorList, sizeof(ColorList), "%s{FFFFFF}%s\n", ColorList, TXT_DialogColorListSelectionBlack); // Color 0
	format(ColorList, sizeof(ColorList), "%s{FFFFFF}%s\n", ColorList, TXT_DialogColorListSelectionWhite); // Color 1

	for (new i = 2; i < sizeof(AVehicleColors); i++)
		format(ColorList, sizeof(ColorList), "%s%s%s\n", ColorList, AVehicleColors[i], "CarColor");

	// Show the dialog with all the colors
	ShowPlayerDialog(playerid, DialogPrimaryCarColor, DIALOG_STYLE_LIST, TXT_DialogTitleChangeColor1, ColorList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	// Let the server know that this was a valid command
	return 1;
}



// Re-colors the given vehicle (lets you choose the second color)
COMMAND:color2(playerid, params[])
{
	// Setup local variables
	new ColorList[1000], Name[MAX_PLAYER_NAME], vid;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/color2", params);

	// Check if the player is inside a vehicle (he must be the driver)
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableAsDriver);

	// Get players name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Get the vehicle-id
	vid = GetPlayerVehicleID(playerid);

	// Check if the player is not the owner of the vehicle
	// and if the player is not an admin
	if ((strcmp(Name, AVehicleData[vid][Owner]) != 0 || isnull(AVehicleData[vid][Owner])) && (APlayerData[playerid][PlayerLevel] == 0))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyOnOwnVehicles);

	// Construct the colorlist
	format(ColorList, sizeof(ColorList), "%s{FFFFFF}%s\n", ColorList, TXT_DialogColorListSelectionBlack); // Color 0
	format(ColorList, sizeof(ColorList), "%s{FFFFFF}%s\n", ColorList, TXT_DialogColorListSelectionWhite); // Color 1

	for (new i = 2; i < sizeof(AVehicleColors); i++)
		format(ColorList, sizeof(ColorList), "%s%s%s\n", ColorList, AVehicleColors[i], "CarColor");

	// Show the dialog with all the colors
	ShowPlayerDialog(playerid, DialogSecondaryCarColor, DIALOG_STYLE_LIST, TXT_DialogTitleChangeColor2, ColorList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	// Let the server know that this was a valid command
	return 1;
}



// Starts or stops the engine of your vehicle
COMMAND:engine(playerid, params[])
{
	// Setup local variables
	new Name[MAX_PLAYER_NAME], vehicleid, engine, lights, alarm, doors, bonnet, boot, objective;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/engine", params);

	// Check if the player is inside a vehicle (he must be the driver)
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableAsDriver);

	// Get players name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Get the vehicle-id
	vehicleid = GetPlayerVehicleID(playerid);

	// Check if the player is not the owner of the vehicle
	// and if the player is not an admin
	if ((strcmp(Name, AVehicleData[vehicleid][Owner]) != 0 || isnull(AVehicleData[vehicleid][Owner])) && (APlayerData[playerid][PlayerLevel] == 0))
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyOnOwnVehicles);

	// Get the current status of the vehicle
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, (1 - engine), lights, alarm, doors, bonnet, boot, objective);

	//Check if the engine is running or not
	if(engine)
		//Inform player about that
		SendClientMessage(playerid, COLOR_GREEN, TXT_CmdEngineOff);
	else
		//Inform player about that
		SendClientMessage(playerid, COLOR_GREEN, TXT_CmdEngineOn);

	// Let the server know that this was a valid command
	return 1;
}



// Asks which vehicle parameter you wanna toggle
COMMAND:caroption(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/caroption", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 3)
		return 0;

	// Let the player select a weather-type
	ShowPlayerDialog(playerid, DialogCarOption, DIALOG_STYLE_LIST, TXT_CaroptionDialogTitle, "Engine\nLights\nAlarm\nDoors\nBonnet\nBoot\nObjective", TXT_DialogButtonToggle, TXT_DialogButtonCancel);

	// Let the server know that this was a valid command
	return 1;
}



// Sets the global weather
COMMAND:weather(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/weather", params);

	// Check if the player's admin level is not high enough
	if (APlayerData[playerid][PlayerLevel] < 4)
		return 0;

	// Let the player select a weather-type
	ShowPlayerDialog(playerid, DialogWeather, DIALOG_STYLE_LIST, TXT_WeatherDialogTitle, "Normal\nStormy\nFoggy\nScorching Hot\nDull, cloudy, rainy\nSandstorm\nGreen Fog\nDark, cloudy, brown\nExtremely bright\nDark toxic clouds\nBlack & white sky", TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	// Let the server know that this was a valid command
	return 1;
}



// This command lists all online admins
COMMAND:admins(playerid, params[])
{
	// Setup local variables
	new AdminList[500], Name[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/admins", params);

	// Scan through all players
	for (new i; i < MAX_PLAYERS; i++)
	{
		// Check if this player is connected
		if (IsPlayerConnected(i))
		{
			// Get the name of the player
			GetPlayerName(i, Name, sizeof(Name));

			// Check if this player is an RCON admin
			if (IsPlayerAdmin(i))
			{
				// Add all admin players to the list
				format(AdminList, sizeof(AdminList), "%s%s: %s (id: %i), admin-level: %i (RCON admin)\n", AdminList, AdminLevelName[APlayerData[i][PlayerLevel]], Name, i, APlayerData[i][PlayerLevel]); // Add the name of the admin-player to the list
				// Re-start the for loop (skipping the remaining code for this iteration)
				continue;
			}

			//Check if that player is an admin (using the PlayerLevel)
			if (APlayerData[i][PlayerLevel] > 0)
			{
				// Add all admin players to the list
				format(AdminList, sizeof(AdminList), "%s%s: %s (id: %i), admin-level: %i\n", AdminList, AdminLevelName[APlayerData[i][PlayerLevel]], Name, i, APlayerData[i][PlayerLevel]); // Add the name of the admin-player to the list
			}
		}
	}

	// Check if there were admin-names added to the list
	if (strlen(AdminList) > 0)
		ShowPlayerDialog(playerid, DialogNoResponse, DIALOG_STYLE_LIST, TXT_AdminDialogTitle, AdminList, TXT_DialogButtonOk, TXT_DialogButtonCancel);
	else
		SendClientMessage(playerid, COLOR_RED, TXT_NoAdminsOnline); // No admins are online

	// Let the server know that this was a valid command
	return 1;
}



// This command lists all commands for normal players (admin-level 0)
COMMAND:cmds(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/cmds", params);

	// Create a list of commands (only the first 4 commands) and show the dialog
	CommandList_Create(playerid);

	// Let the server know that this was a valid command
	return 1;
}



COMMAND:convoy(playerid, params[])
{
	// Setup local variables
	new ConvoyList[750], Name[MAX_PLAYER_NAME], NumMembers, ConvoyStatus[10];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoy", params);

	// Create the list of convoys with all their data
	for (new i; i < MAX_CONVOYS; i++)
	{
		// Check if this is an empty convoy (not created yet by a player)
		if (AConvoys[i][Status] == CONVOY_EMPTY)
		{
			// Setup data for an empty convoy (one which hasn't been chosen yet)
			NumMembers = 0;
			format(Name, sizeof(Name), "None");
			format(ConvoyStatus, sizeof(ConvoyStatus), "Empty");
		}
		else
		{
			// Get the name of the convoy-leader
			GetPlayerName(AConvoys[i][Members][0], Name, sizeof(Name));
			// Calculate the members in the convoy
			NumMembers = Convoy_CountMembers(i);
			// Set the status of the convoy
			switch (AConvoys[i][Status])
			{
				case CONVOY_OPEN: format(ConvoyStatus, sizeof(ConvoyStatus), "Open");
				case CONVOY_FULL: format(ConvoyStatus, sizeof(ConvoyStatus), "Full");
				case CONVOY_CLOSED: format(ConvoyStatus, sizeof(ConvoyStatus), "Closed");
			}
		}

		// Put all data together to form the content of the entire dialog
		format(ConvoyList, sizeof(ConvoyList), "%sLeader: {00FF00}%s{FFFFFF}, members: {FF0000}%i{FFFFFF}, Status: {00FF00}%s{FFFFFF}\n", ConvoyList, Name, NumMembers, ConvoyStatus);
	}

	// Show the dialog
	ShowPlayerDialog(playerid, DialogSelectConvoy, DIALOG_STYLE_LIST, "Select convoy:", ConvoyList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	// Let the server know that this was a valid command
	return 1;
}



// Allows the leader to kick a member from the convoy
COMMAND:convoykick(playerid, params[])
{
	// Setup local variables
	new Convoy, LeaderID, OtherPlayer, LeaderName[MAX_PLAYER_NAME], MemberName[MAX_PLAYER_NAME], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoykick", params);

	// Get the convoy of the player
	Convoy = APlayerData[playerid][ConvoyID];
	// Get the leader of his convoy
	LeaderID = AConvoys[Convoy][Members][0];

	// Check if this player is not part of any convoy
	if (APlayerData[playerid][InConvoy] != true)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableForLeader);

	// Check if this player is not the leader of his convoy
	if (LeaderID == playerid)
		return SendClientMessage(playerid, COLOR_RED, TXT_CmdOnlyAvailableForLeader);

	if (sscanf(params, "u", OtherPlayer))
	{
		format(Message, sizeof(Message), TXT_SscanfFailedUsuage, "/convoykick <Player>");
		return SendClientMessage(playerid, COLOR_RED, Message);
	}

	// Check if leader tries to kick himself
	if (playerid == OtherPlayer)
		return SendClientMessage(playerid, COLOR_RED, TXT_CantKickYourselfFromConvoy);

	// Check if the player is not logged in
	if (APlayerData[OtherPlayer][LoggedIn] != true)
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotLoggedIn);

	if ((APlayerData[OtherPlayer][InConvoy] != true) || (APlayerData[OtherPlayer][ConvoyID] != Convoy))
		return SendClientMessage(playerid, COLOR_ORANGE, TXT_PlayerNotInYourConvoy);

	// Kick the other player from the convoy
	Convoy_Leave(OtherPlayer);
	// Get the names of the leader and member
	GetPlayerName(playerid, LeaderName, sizeof(LeaderName));
	GetPlayerName(OtherPlayer, MemberName, sizeof(MemberName));
	// Inform the leader that he has kicked the other player
	format(Message, sizeof(Message), TXT_KickedPlayerFromConvoy, MemberName);
	SendClientMessage(playerid, COLOR_ORANGE, Message);
	// Inform the leader that he has kicked the other player
	format(Message, sizeof(Message), TXT_KickedFromConvoyByLeader, LeaderName);
	SendClientMessage(OtherPlayer, COLOR_ORANGE, Message);

	// Let the server know that this was a valid command
	return 1;
}



// Allows a convoy-member to leave the convoy
COMMAND:convoyleave(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoyleave", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if this player is part of a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
		    // Kick the other player from the convoy
			Convoy_Leave(playerid);
			// Inform the player that he left the convoy
			SendClientMessage(playerid, COLOR_GREEN, "You left the convoy");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Allows the leader to cancel a convoy
COMMAND:convoycancel(playerid, params[])
{
	// Setup local variables
	new Convoy, LeaderID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoycancel", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		Convoy = APlayerData[playerid][ConvoyID]; // Get the convoy of the player
		LeaderID = AConvoys[Convoy][Members][0]; // Get the leader of his convoy

		// Check if this player is part of a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
			// Check if this player is the leader of the convoy
			if (LeaderID == playerid)
				Convoy_Cancel(Convoy); // Cancel the convoy, kicking every other member from it
			else
			    SendClientMessage(playerid, COLOR_RED, "You need to be the leader of a convoy to cancel it");
		}
		else
		    SendClientMessage(playerid, COLOR_RED, "You need to be the leader of a convoy to cancel it");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Displays all members in the convoy
COMMAND:convoymembers(playerid, params[])
{
	// Setup local variables
	new Name[MAX_PLAYER_NAME], MemberList[1000], Convoy;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoymembers", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the member is in a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
			// Get the convoyID of the member
			Convoy = APlayerData[playerid][ConvoyID];

			// Loop through all members
			for (new i; i < CONVOY_MAX_MEMBERS; i++)
			{
			    if (AConvoys[Convoy][Members][i] != -1) // Check if this member-spot is occupied
				{
					// Get the name of the member
					GetPlayerName(AConvoys[Convoy][Members][i], Name, sizeof(Name));
					// Add the membernames to the list
					format(MemberList, sizeof(MemberList), "%s%s\n", MemberList, Name);
				}
			}

			// Show the dialog
			ShowPlayerDialog(playerid, DialogConvoyMembers, DIALOG_STYLE_LIST, "Convoy-members", MemberList, TXT_DialogButtonOk, TXT_DialogButtonCancel);
		}
		else
		    SendClientMessage(playerid, COLOR_RED, "You're not a member of a convoy");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Displays the statictics of the player
COMMAND:stats(playerid, params[])
{
	// Setup local variables
	new StatsMsg[1000], TitleMsg[128], StatsPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/stats", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if(sscanf(params, "U(-1)", StatsPlayer)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/stats <StatsPlayer (optional)>\"");
		else
		{
			if (-1 == StatsPlayer)
				StatsPlayer = playerid;

			// Check if stats player is online
			if (IsPlayerConnected(StatsPlayer)) {
				if (playerid == StatsPlayer) {
					format(TitleMsg, sizeof(TitleMsg), "Your Statistics");
				} else {
					new Name[MAX_PLAYER_NAME];
					// Get the player's name
					GetPlayerName(StatsPlayer, Name, sizeof(Name));
					// Construct the title for the dialog
					format(TitleMsg, sizeof(TitleMsg), "Statistics for %s:", Name);
				}

				// Construct the stats
				format(StatsMsg, sizeof(StatsMsg), "Distance driven: {00FF00}%.0f meters (%.2f km)\n", APlayerData[StatsPlayer][StatsMetersDriven], (APlayerData[StatsPlayer][StatsMetersDriven] / 1000));
				format(StatsMsg, sizeof(StatsMsg), "%sFinished trucker jobs: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsTruckerJobs]);
				format(StatsMsg, sizeof(StatsMsg), "%sFinished convoy jobs: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsConvoyJobs]);
				format(StatsMsg, sizeof(StatsMsg), "%sFinished busdriver routes: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsBusDriverJobs]);
				format(StatsMsg, sizeof(StatsMsg), "%sFinished pilot jobs: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsPilotJobs]);
				format(StatsMsg, sizeof(StatsMsg), "%sFinished courier jobs: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsCourierJobs]);
				format(StatsMsg, sizeof(StatsMsg), "%sFinished roadworker jobs: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsRoadworkerJobs]);
				format(StatsMsg, sizeof(StatsMsg), "%sFixed vehicles for assistance: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsAssistance]);
				format(StatsMsg, sizeof(StatsMsg), "%sFinished mafia jobs: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsMafiaJobs]);
				format(StatsMsg, sizeof(StatsMsg), "%sDelivered stolen mafia-loads: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsMafiaStolen]);
				format(StatsMsg, sizeof(StatsMsg), "%sFined players: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsPoliceFined]);
				format(StatsMsg, sizeof(StatsMsg), "%sJailed players: {00FF00}%i{FFFFFF}\n", StatsMsg, APlayerData[StatsPlayer][StatsPoliceJailed]);

				// Show the dialog
				ShowPlayerDialog(playerid, DialogStats, DIALOG_STYLE_LIST, TitleMsg, StatsMsg, TXT_DialogButtonOk, TXT_DialogButtonCancel);
			}
			else
				SendClientMessage(playerid, COLOR_RED, "Player isn't connected");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command allows you to create a speedcamera
COMMAND:createcamera(playerid, params[])
{
	// Setup local variables
	new Float:x, Float:y, Float:z, Float:Angle, MaxSpeed, file[100], File:PFile, LineForFile[100], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/createcamera", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5)
		{
			if (sscanf(params, "i", MaxSpeed)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/createcamera <Max Speed>\"");
			else
			{
				// Get player's position and facing angle
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, Angle);
				z = z - 1.0; // Adjust camera Z-coordinate 1m lower than normal (otherwise the camera floats in the air)

				// Move the player a bit, otherwise he could get stuck inside the camera-object
				SetPlayerPos(playerid, x, y + 1.0, z + 1.0);

				// Save the camera to a file
				for (new CamID; CamID < MAX_CAMERAS; CamID++)
				{
					// Check if this index is free
					if (ACameras[CamID][CamSpeed] == 0)
					{
					    // Setup this camera (create the objects and store the data)
                        SetupSpeedCamera(CamID, x, y, z, Angle, MaxSpeed);

					    // Save the file
						format(file, sizeof(file), CameraFile, CamID); // Construct the complete filename for this camera-file

						PFile = fopen(file, io_write); // Open the camera-file for writing

						format(LineForFile, sizeof(LineForFile), "CamX %f\r\n", x);
						fwrite(PFile, LineForFile); // And save it to the file
						format(LineForFile, sizeof(LineForFile), "CamY %f\r\n", y);
						fwrite(PFile, LineForFile); // And save it to the file
						format(LineForFile, sizeof(LineForFile), "CamZ %f\r\n", z);
						fwrite(PFile, LineForFile); // And save it to the file
						format(LineForFile, sizeof(LineForFile), "CamAngle %f\r\n", Angle);
						fwrite(PFile, LineForFile); // And save it to the file
						format(LineForFile, sizeof(LineForFile), "CamSpeed %i\r\n", MaxSpeed);
						fwrite(PFile, LineForFile); // And save it to the file

						fclose(PFile); // Close the file

						// Let the player know he created a new camera
						format(Message, sizeof(Message), "You've created a speed-camera with ID: %i", CamID);
						SendClientMessage(playerid, COLOR_GREEN, Message);

						// Exit the function
						return 1;
					}
				}

				// In case all camera-slots are occupied (100 camera's have been created already), let the player know about it
				format(Message, sizeof(Message), "You cannot create more than %i speedcamera's", MAX_CAMERAS);
				SendClientMessage(playerid, COLOR_RED, Message);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command allows you to delete a speedcamera
COMMAND:delcamera(playerid, params[])
{
	// Setup local variables
	new file[100], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/delcamera", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5)
		{
				// Loop through all camera's
			for (new CamID; CamID < MAX_CAMERAS; CamID++)
			{
				// Check if this index is used
				if (ACameras[CamID][CamSpeed] != 0)
				{
					// Check if the player is in range of the camera
					if (IsPlayerInRangeOfPoint(playerid, 5.0, ACameras[CamID][CamX], ACameras[CamID][CamY], ACameras[CamID][CamZ]))
					{
					    // Delete the file
						format(file, sizeof(file), CameraFile, CamID); // Construct the complete filename for this camera-file
						if (fexist(file)) // Make sure the file exists
							fremove(file); // Delete the file

						// Delete both camera objects
					    DestroyObject(ACameras[CamID][CamObj1]);
					    DestroyObject(ACameras[CamID][CamObj2]);
						// Also clear the data from memory
					    ACameras[CamID][CamX] = 0.0;
					    ACameras[CamID][CamY] = 0.0;
					    ACameras[CamID][CamZ] = 0.0;
					    ACameras[CamID][CamAngle] = 0.0;
					    ACameras[CamID][CamSpeed] = 0;
                        ACameras[CamID][CamObj1] = 0;
                        ACameras[CamID][CamObj2] = 0;

						// Let the player know he deleted a camera
						format(Message, sizeof(Message), "You've deleted speed-camera %i", CamID);
						SendClientMessage(playerid, COLOR_GREEN, Message);

						// Exit the function
						return 1;
					}
				}
			}

			// In case the player wasn't near a speedcamera, inform him about it
			SendClientMessage(playerid, COLOR_RED, "You must be near a speedcamera to delete it");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// This command ports a player to the player who executed the command
COMMAND:get(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Float:x, Float:y, Float:z, Message[128], IntID, WorldID, Name[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/get", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/get <Player>\"");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the name of the other player
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Get the location of the player
					GetPlayerPos(playerid, x, y, z);
					IntID = GetPlayerInterior(playerid);
					WorldID = GetPlayerVirtualWorld(playerid);
					// Port the other player to this player
					SetPlayerVirtualWorld(OtherPlayer, WorldID);
					SetPlayerInterior(OtherPlayer, IntID);
					SetPlayerPos(OtherPlayer, x, y, z + 3.0);
					// Let the player know about it
					format(Message, sizeof(Message), "{00FF00}You have ported {FFFF00}%s{00FF00} to your location", Name);
					SendClientMessage(playerid, COLOR_WHITE, Message);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command deleted all vehicles that are spawned using /car, /plane, /bike, /trailer
COMMAND:cleanupallvehicles(playerid, params[])
{
	// Setup local variables
	new CarsDeleted, Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/cleanupallvehicles", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3)
		{
		    // Loop through all vehicles
		    for (new vid; vid < 2000; vid++)
		    {
				// Check if this vehicle exists (check the model), otherwise all empty slots are processed as well
				if (AVehicleData[vid][Model] != 0)
				{
					// Check if the vehicle is NOT a static vehicle
					if (AVehicleData[vid][StaticVehicle] == false)
					{
						// Check if the vehicle is NOT owned by anybody (this leaves all vehicles spawned with /car, /trailer, /plane)
						if (AVehicleData[vid][Owned] == false)
						{
							// Count the cars that have been deleted
							CarsDeleted++;
							// Eject everyone from the vehicle
							RemoveAllPlayersFromVehicle(vid);
							// Delete the vehicle and clear the data
							SetTimerEx("TimedDestroyVehicle", 1000, false, "i", vid);
							AVehicleData[vid][Owned] = false;
							AVehicleData[vid][Owner] = 0;
							AVehicleData[vid][Model] = 0;
							AVehicleData[vid][PaintJob] = 0;
							for (new i; i < 14; i++)
							    AVehicleData[vid][Components][i] = 0;
							AVehicleData[vid][SpawnX] = 0.0;
							AVehicleData[vid][SpawnY] = 0.0;
							AVehicleData[vid][SpawnZ] = 0.0;
							AVehicleData[vid][SpawnRot] = 0.0;
							AVehicleData[vid][BelongsToHouse] = 0;
						}
					}
				}
		    }

			// Let the player know how many vehicles have been cleaned up
			format(Message, sizeof(Message), "{00FF00}Total number of vehicles cleaned up: {FFFF00}%i", CarsDeleted);
			SendClientMessage(playerid, COLOR_WHITE, Message);
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Deletes a specific vehicle that has been spawned by an admin
COMMAND:cleanupvehicle(playerid, params[])
{
    // Setup local variables
	new vID, Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/cleanupvehicle", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3)
		{
			if (sscanf(params, "i", vID)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/cleanupvehicle <Vehicle ID>\"");
			else
			{
				// Check if this vehicle exists (check the model), otherwise all empty slots are processed as well
				if (AVehicleData[vID][Model] != 0)
				{
					// Check if the vehicle is NOT a static vehicle
					if (AVehicleData[vID][StaticVehicle] == false)
					{
						// Check if the vehicle is NOT owned by anybody (this leaves all vehicles spawned with /car, /trailer, /plane)
						if (AVehicleData[vID][Owned] == false)
						{
							// Eject everyone from the vehicle
							RemoveAllPlayersFromVehicle(vID);
							// Destroy the given vehicle
							SetTimerEx("TimedDestroyVehicle", 1000, false, "i", vID);
							AVehicleData[vID][Owned] = false;
							AVehicleData[vID][Owner] = 0;
							AVehicleData[vID][Model] = 0;
							AVehicleData[vID][PaintJob] = 0;
							for (new i; i < 14; i++)
							    AVehicleData[vID][Components][i] = 0;
							AVehicleData[vID][SpawnX] = 0.0;
							AVehicleData[vID][SpawnY] = 0.0;
							AVehicleData[vID][SpawnZ] = 0.0;
							AVehicleData[vID][SpawnRot] = 0.0;
							AVehicleData[vID][BelongsToHouse] = 0;
							// Inform the player about it
							format(Message, sizeof(Message), "You deleted vehicle-id %i", vID);
							SendClientMessage(playerid, COLOR_GREEN, Message);
						}
						else
							SendClientMessage(playerid, COLOR_RED, "That vehicle belongs to a player, you can use /clamp");
					}
					else
						SendClientMessage(playerid, COLOR_RED, "That vehicle is a static vehicle, delete it in the script");
				}
				else
					SendClientMessage(playerid, COLOR_RED, "That vehicle doesn't exist");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command allows the player to call for assistance
COMMAND:assist(playerid, params[])
{
	// Setup local variables
	new bool:AssistOnline = false, Message[128], Name[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/assist", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Get the player's name
		GetPlayerName(playerid, Name, sizeof(Name));
		// Preset the message that needs to be sent to assistance players
		format(Message, sizeof(Message), "{00FF00}Player {FFFF00}%s{00FF00} needs assistance, go help him", Name);

		// Check if there is at least one assistance player online
		for (new i; i < MAX_PLAYERS; i++)
		{
			// Check if this player is connected
			if (IsPlayerConnected(i))
			{
				// Check if this player is assistance class
				if (APlayerData[i][PlayerClass] == ClassAssistance)
				{
					// Set the flag to indicate that at least one assistance player is online
				    AssistOnline = true;
				    // Send the assistance player a message to inform him who needs assistance
				    SendClientMessage(i, COLOR_WHITE, Message);
				}
			}
		}

		// Check if there is at least one assistance player online
		if (AssistOnline == true)
		{
			// Set yourself as "AssistanceNeeded"
			APlayerData[playerid][AssistanceNeeded] = true;
			// Let the player know he called for assistance
			SendClientMessage(playerid, COLOR_GREEN, "You've called for assistance");
		}
		else // No assistance is online
		{
			// Check if the player is the driver of a vehicle
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				// Fully repair the vehicle (damage value and bodywork)
				RepairVehicle(GetPlayerVehicleID(playerid));
				// Also re-fuel the vehicle
				AVehicleData[GetPlayerVehicleID(playerid)][Fuel] = MaxFuel;
				// Let the player pay for the repairs and refuel
				RewardPlayer(playerid, -PRICE_AUTO_ASSIST, 0);
				// Let the player know he spent money for auto-repair because there were no assistance players online
				format(Message, sizeof(Message), TXT_VehColorChangePaid, PRICE_AUTO_ASSIST);
				SendClientMessage(playerid, COLOR_GREEN, Message);
			}
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command adds nitro to the player's vehicle
COMMAND:nos(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/nos", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			// Check if the player is the driver of a vehicle
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				// Check if the vehicle isn't owned (owned vehicle's need to buy nitro at mod garages)
				if (AVehicleData[GetPlayerVehicleID(playerid)][Owned] == false)
					AddVehicleComponent(GetPlayerVehicleID(playerid), 1010); // Add nitro to the player's vehicle
				
				//Inform player the nos has been added
				SendClientMessage(playerid, COLOR_GREEN, "Nos has been added");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command let's an admin spectate another player
COMMAND:spec(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Name[MAX_PLAYER_NAME], Message[128], Float:x, Float:y, Float:z, Float:angle;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/spec", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/spec <Player>\"");
			else
			{
				if (OtherPlayer == playerid) {
					format(Message, sizeof(Message), TXT_PlayerSelfSpectate, Name);
					return SendClientMessage(playerid, COLOR_WHITE, Message);
				}
				
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the player's name
					GetPlayerName(OtherPlayer, Name, sizeof(Name));

					// Get current coordinates
					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, angle);

					if (GetPlayerState(OtherPlayer) == PLAYER_STATE_SPECTATING) {
						format(Message, sizeof(Message), TXT_PlayerSpectating, Name);
						return SendClientMessage(playerid, COLOR_WHITE, Message);
					}

					if (GetPlayerState(OtherPlayer) == PLAYER_STATE_WASTED || GetPlayerState(OtherPlayer) == PLAYER_STATE_NONE)
					{
						format(Message, sizeof(Message), TXT_PlayerNotSpawned);
						return SendClientMessage(playerid, COLOR_WHITE, Message);
					}

					// Only save the current positon at the first time
					if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING) {
						APlayerData[playerid][SpectateX] = x;
						APlayerData[playerid][SpectateY] = y;
						APlayerData[playerid][SpectateZ] = z;
						APlayerData[playerid][SpectateA] = angle;
						APlayerData[playerid][Spectating] = true;
					}

				    // Turn spectating on
				    TogglePlayerSpectating(playerid, 1);

					// Check if the other player is driving a vehicle
					if (GetPlayerVehicleSeat(OtherPlayer) == -1)
					{
						// The other player is on foot, so spectate him
						PlayerSpectatePlayer(playerid, OtherPlayer);
						SetPlayerInterior(playerid, GetPlayerInterior(OtherPlayer));
						APlayerData[playerid][SpectateID] = OtherPlayer;
						APlayerData[playerid][SpectateType] = ADMIN_SPEC_TYPE_PLAYER;
					}
					else
					{
						// The other player is in a vehicle, so spectate the vehicle
						PlayerSpectateVehicle(playerid, GetPlayerVehicleID(OtherPlayer));
						APlayerData[playerid][SpectateID] = OtherPlayer;
						APlayerData[playerid][SpectateVehicle] = GetPlayerVehicleID(OtherPlayer);
						APlayerData[playerid][SpectateType] = ADMIN_SPEC_TYPE_VEHICLE;
					}

					format(Message, sizeof(Message), "{00FF00}You're spectating {FFFF00}%s", Name);
					SendClientMessage(playerid, COLOR_WHITE, Message);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command ends the spectate mode
COMMAND:endspec(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/endspec", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			// Check if the player is spectating
			if (GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
			{
			    TogglePlayerSpectating(playerid, 0);
				APlayerData[playerid][SpectateID] = -1;
				APlayerData[playerid][SpectateVehicle] = -1;
				APlayerData[playerid][SpectateType] = ADMIN_SPEC_TYPE_NONE;
			}
			else
			    SendClientMessage(playerid, COLOR_RED, "You are not spectating");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player add new businesses
COMMAND:createbusiness(playerid, params[])
{
	// Setup local variables
	new BusinessList[2000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/createbusiness", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5)
		{
			// Check if the player isn't inside a vehicle
			if (GetPlayerVehicleSeat(playerid) == -1)
			{
				// Construct the list of businesses
				for (new BusType = 1; BusType < sizeof(ABusinessInteriors); BusType++)
				{
				    format(BusinessList, sizeof(BusinessList), "%s%s\n", BusinessList, ABusinessInteriors[BusType][InteriorName]);
				}

				// Let the player choose a business-type via a dialog
				ShowPlayerDialog(playerid, DialogCreateBusSelType, DIALOG_STYLE_LIST, "Choose business-type:", BusinessList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
			}
			else
			    SendClientMessage(playerid, COLOR_RED, "You can't be inside a vehicle to create a business");
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command lets the player delete a business
COMMAND:delbusiness(playerid, params[])
{
	// Setup local variables
	new file[100], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/delbusiness", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5)
		{
			// Make sure the player isn't inside a vehicle
			if (GetPlayerVehicleID(playerid) == 0)
			{
				// Loop through all player-owned businesses
				for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
				{
					// Check if the business exists
					if (ABusinessData[BusID][PickupID] != 0)
					{
						// Check if the business has no owner
						if (ABusinessData[BusID][Owned] == false)
						{
							// Check if the player is in range of the business-pickup
							if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]))
							{
								// Clear all data of the business
	                            ABusinessData[BusID][BusinessName] = 0;
	                            ABusinessData[BusID][BusinessX] = 0.0;
	                            ABusinessData[BusID][BusinessY] = 0.0;
	                            ABusinessData[BusID][BusinessZ] = 0.0;
	                            ABusinessData[BusID][BusinessType] = 0;
	                            ABusinessData[BusID][BusinessLevel] = 0;
	                            ABusinessData[BusID][LastTransaction] = 0;
	                            ABusinessData[BusID][Owned] = false;
	                            ABusinessData[BusID][Owner] = 0;
								// Destroy the mapicon, 3DText and pickup for the house
								DestroyDynamicPickup(ABusinessData[BusID][PickupID]);
								DestroyDynamicMapIcon(ABusinessData[BusID][MapIconID]);
								DestroyDynamic3DTextLabel(ABusinessData[BusID][DoorText]);
	                            ABusinessData[BusID][PickupID] = 0;
	                            ABusinessData[BusID][MapIconID] = 0;

								// Delete the business-file
								format(file, sizeof(file), BusinessFile, BusID); // Construct the complete filename for this business-file
								if (fexist(file)) // Make sure the file exists
									fremove(file); // Delete the file

								// Also let the player know he deleted the business
								format(Message, sizeof(Message), "{00FF00}You have deleted the business with ID: {FFFF00}%i", BusID);
								SendClientMessage(playerid, COLOR_WHITE, Message);

								// Exit the function
								return 1;
							}
						}
					}
				}

				// There was no house in range, so let the player know about it
				SendClientMessage(playerid, COLOR_RED, "No business in range to delete");
			}
			else
			    SendClientMessage(playerid, COLOR_RED, "You can't be inside a vehicle to delete a business");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command lets the player buy a business when he's standing in range of a business that isn't owned yet
COMMAND:buybus(playerid, params[])
{
	// Setup local variables
	new Message[128], BusType;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/buybus", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Make sure the player isn't inside a vehicle
		if (GetPlayerVehicleID(playerid) == 0)
		{
			// Check if the player is near a business-pickup
			for (new i = 1; i < sizeof(ABusinessData); i++)
			{
				// Check if this business is created (it would have a valid pickup in front of the door)
				if (ABusinessData[i][PickupID] != 0)
				{
					// Check if the player is in range of the business-pickup
					if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[i][BusinessX], ABusinessData[i][BusinessY], ABusinessData[i][BusinessZ]))
					{
					    // Check if the business isn't owned yet
					    if (ABusinessData[i][Owned] == false)
					    {
							// Get the type of business
							BusType = ABusinessData[i][BusinessType];
					        // Check if the player can afford this type of business business
					        if (APlayerData[playerid][PlayerMoney] >= ABusinessInteriors[BusType][BusPrice])
					            Business_SetOwner(playerid, i); // Give ownership of the business to the player
					        else
					            SendClientMessage(playerid, COLOR_RED, "You cannot afford this business"); // The player cannot afford this business
					    }
					    else
					    {
					        // Let the player know that this business is already owned by a player
							format(Message, sizeof(Message), "This business is already owned by {00FF00}%s{FFFFFF}", ABusinessData[i][Owner]);
							SendClientMessage(playerid, COLOR_RED, Message);
					    }

						// The player was in range of a business-pickup, so stop searching for the other business pickups
					    return 1;
					}
				}
				else
				    return 1; // If there are no more houses (no more pickup-id's found), stop searching
			}

			// All businesses have been processed, but the player wasn't in range of any business-pickup, let him know about it
			SendClientMessage(playerid, COLOR_RED, "To buy a business, you have to be near a business-pickup");
		}
		else
		    SendClientMessage(playerid, COLOR_RED, "You can't buy a business when you're inside a vehicle");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command opens a menu when you're inside your business to allow to access the options of your business
COMMAND:busmenu(playerid, params[])
{
	// Setup local variables
	new OptionsList[200], DialogTitle[200];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/busmenu", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is inside a business
		if (APlayerData[playerid][CurrentBusiness] != 0)
		{
			format(DialogTitle, sizeof(DialogTitle), "Select option for %s", ABusinessData[APlayerData[playerid][CurrentBusiness]][BusinessName]);

			format(OptionsList, sizeof(OptionsList), "%sChange business-name\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sUpgrade business\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sRetrieve business earnings\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sSell business\n", OptionsList);
			// Show the businessmenu
			ShowPlayerDialog(playerid, DialogBusinessMenu, DIALOG_STYLE_LIST, DialogTitle, OptionsList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
		}
		else
		    SendClientMessage(playerid, COLOR_RED, "You're not inside a business");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command teleports you to your selected business
COMMAND:gobus(playerid, params[])
{
	// Setup local variables
	new BusinessList[1000], BusID, BusType, Earnings;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/gobus", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is not jailed
		if (APlayerData[playerid][PlayerJailed] == 0)
		{
			// Check if the player has a wanted level of less than 3
			if (GetPlayerWantedLevel(playerid) < 3)
			{
				// Check if the player is not inside a vehicle
				if (GetPlayerVehicleID(playerid) == 0)
				{
					// Ask to which business the player wants to port
					for (new i; i < MAX_BUSINESSPERPLAYER; i++)
					{
						// Get the business-id
					    BusID = APlayerData[playerid][Business][i];

						// Check if this businessindex is occupied
						if (BusID != 0)
						{
							// Get the business-type
							BusType = ABusinessData[BusID][BusinessType];
							Earnings = (BusinessTransactionTime - ABusinessData[BusID][LastTransaction]) * ABusinessInteriors[BusType][BusEarnings] * ABusinessData[BusID][BusinessLevel];
							format(BusinessList, sizeof(BusinessList), "%s{00FF00}%s{FFFFFF} (earnings: $%i)\n", BusinessList, ABusinessData[BusID][BusinessName], Earnings);
						}
						else
							format(BusinessList, sizeof(BusinessList), "%s{FFFFFF}%s{FFFFFF}\n", BusinessList, "Empty business-slot");
					}
					ShowPlayerDialog(playerid, DialogGoBusiness, DIALOG_STYLE_LIST, "Choose the business to go to:", BusinessList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
				}
				else
					SendClientMessage(playerid, COLOR_RED, "You need to be on-foot to port to your business");
			}
			else
			    SendClientMessage(playerid, COLOR_RED, "You cannot use /gobus when you're wanted");
		}
		else
		    SendClientMessage(playerid, COLOR_RED, "You cannot use /gobus when you're in jail");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Mutes a player (he cannot talk anymore)
COMMAND:mute(playerid, params[])
{
	// Setup local variables
	new Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME], Reason[MAX_STRING_INPUT_TEXT], OtherPlayer, TimeToMute;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/mute", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			if (sscanf(params, "uis[128]", OtherPlayer, TimeToMute, Reason)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/mute <Player> <Duration (in minutes)> <Reason>\"");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Check if the muted time is in range
					if(TimeToMute < 1 || TimeToMute > 60)
						return SendClientMessage(playerid, COLOR_RED, "The time to mute must be between 1 minute and 60 minutes");

					// Check if another player is muted
					if(APlayerData[OtherPlayer][Muted] > gettime())
						return SendClientMessage(playerid, COLOR_RED, "That player is already muted");

					GameTextForPlayer(playerid, TXT_PlayerMuted, 2000, 6);

					// Get the player-names
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Mute the other player
					APlayerData[OtherPlayer][Muted] = (TimeToMute * 60) + gettime();
					// Let the other player know that he has been muted
					format(Message, sizeof(Message), "You have been muted by {FFFF00}%s {FF0000}for {FFFF00}%s", AdminName, Reason);
					SendClientMessage(OtherPlayer, COLOR_RED, Message);

					ShowRemainingMutedTime(OtherPlayer); // Show the remaining muted time to the player

					// Let the admin know who he has muted
					format(Message, sizeof(Message), "{00FF00}You have muted {FFFF00}%s", Name);
					SendClientMessage(playerid, COLOR_WHITE, Message);

					ShowRemainingMutedTime(playerid); // Show the remaining muted time to the admin

					// Save the player-stats
					PlayerFile_Save(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Un-mutes a player (he cannot talk anymore)
COMMAND:unmute(playerid, params[])
{
	// Setup local variables
	new Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME], OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/unmute", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/unmute <Player>\"");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Check if the another player is not muted
					if(APlayerData[OtherPlayer][Muted] < gettime())
						return SendClientMessage(playerid, COLOR_RED, "That player is not muted");
					
					GameTextForPlayer(playerid, TXT_PlayerUnMuted, 2000, 6);

					// Get the player-names
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Un-mute the other player
					APlayerData[OtherPlayer][Muted] = 0;
					// Let the other player know that he has been un-muted
					format(Message, sizeof(Message), "You have been un-muted by {FFFF00}%s", AdminName);
					SendClientMessage(OtherPlayer, COLOR_GREEN, Message);
					// Let the admin know who he has un-muted
					format(Message, sizeof(Message), "You have un-muted {FFFF00}%s", Name);
					SendClientMessage(playerid, COLOR_GREEN, Message);
					// Save the player-stats
					PlayerFile_Save(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Let's the admins see which players are still muted
COMMAND:muted(playerid, params[])
{
	// Setup local variables
	new PlayerList[1000], Name[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/muted", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			// Loop through all players
			for (new i; i < MAX_PLAYERS; i++)
			{
				// Check if that player is online
				if (IsPlayerConnected(i))
				{
				    if (APlayerData[i][Muted] > gettime())
					{
						// Get the player's name
						GetPlayerName(i, Name, sizeof(Name));
						// Add his name and ID to the list
						format(PlayerList, sizeof(PlayerList), "%s%s (ID: %i)\n", PlayerList, Name, i);
					}
				}
			}

			// Show the list of muted players to the admin
			if (strlen(PlayerList) != 0)
				ShowPlayerDialog(playerid, DialogNoResponse, DIALOG_STYLE_LIST, "Muted players:", PlayerList, TXT_DialogButtonOk, TXT_DialogButtonCancel);
			else
			    SendClientMessage(playerid, COLOR_GREEN, "There are no muted players");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Freeze a player (he cannot move anymore)
COMMAND:freeze(playerid, params[])
{
	// Setup local variables
	new Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME], Reason[MAX_STRING_INPUT_TEXT], OtherPlayer, Duration;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/freeze", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			if (sscanf(params, "uis[128]", OtherPlayer, Duration, Reason)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/freeze <Player> <Duration (in seconds)> <Reason>\"");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the player-names
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Store the duration for the freeze, freeze him and start the frozentimer
					APlayerData[OtherPlayer][PlayerFrozen] = Duration;
					TogglePlayerControllable(OtherPlayer, 0);
					FreezeTimer[OtherPlayer] = SetTimerEx("Player_FreezeTimer", 1000, true, "i", OtherPlayer);
					// Let the other player know that he has been muted
					format(Message, sizeof(Message), "You have been frozen by {FFFF00}%s {FF0000}for {FFFF00}%s", AdminName, Reason);
					SendClientMessage(OtherPlayer, COLOR_RED, Message);
					// Let the admin know who he has muted
					format(Message, sizeof(Message), "{00FF00}You have frozen {FFFF00}%s", Name);
					SendClientMessage(playerid, COLOR_WHITE, Message);
					// Save the player-stats
					PlayerFile_Save(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Unfreeze a player (he can move again)
COMMAND:unfreeze(playerid, params[])
{
	// Setup local variables
	new Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME], OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/unfreeze", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/unfreeze <Player>\"");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Check if the player is frozen
					if (APlayerData[playerid][PlayerFrozen] >= 1) {
						// Just set the frozen timer to zero
						// the freeze timer will do the rest
						APlayerData[playerid][PlayerFrozen] = 0;

						// Get the player names
						GetPlayerName(playerid, AdminName, sizeof(AdminName));
						GetPlayerName(OtherPlayer, Name, sizeof(Name));
						// Let the other player know that he has been un-frozen
						format(Message, sizeof(Message), "You have been un-frozen by {FFFF00}%s {FF0000}for {FFFF00}%s", AdminName);
						SendClientMessage(OtherPlayer, COLOR_RED, Message);
						// Let the admin know who he has un-frozen
						format(Message, sizeof(Message), "{00FF00}You have un-frozen {FFFF00}%s", Name);
						SendClientMessage(playerid, COLOR_WHITE, Message);
					}
					else
						SendClientMessage(playerid, COLOR_RED, "That player has not been frozen");
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Transfer money to another player
COMMAND:givecash(playerid, params[])
{
	// Setup local variables
	new Message[128], Name[MAX_PLAYER_NAME], OtherName[MAX_PLAYER_NAME], OtherPlayer, Money;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/givecash", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "ui", OtherPlayer, Money)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/givecash <Player> <Money>\"");
		else
		{
			if (OtherPlayer == playerid)
				return SendClientMessage(playerid, COLOR_RED, "You can't give money to yourself");

			// Check if the otherplayer is online
			if (IsPlayerConnected(OtherPlayer))
			{
				// Get the player-names
				GetPlayerName(playerid, Name, sizeof(Name));
				GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));

				// Check if the money has a positive value (to prevent stealing money using negative values)
				if (Money > 0)
				{
					// Check if the player has enough money
					if (APlayerData[playerid][PlayerMoney] >= Money)
					{
						// Transfer the money
						RewardPlayer(playerid, -Money, 0);
						RewardPlayer(OtherPlayer, Money, 0);
						// Let the other player know that he has received money
						format(Message, sizeof(Message), "{00FF00}You have received {FFFF00}$%i{00FF00} from {FFFF00}%s", Money, Name);
						SendClientMessage(OtherPlayer, COLOR_WHITE, Message);
						// Let the player know he gave money to somebody else
						format(Message, sizeof(Message), "{00FF00}You gave {FFFF00}$%i{00FF00} to {FFFF00}%s", Money, OtherName);
						SendClientMessage(playerid, COLOR_WHITE, Message);
						// Save the player-stats
						PlayerFile_Save(playerid);
						PlayerFile_Save(OtherPlayer);
					}
					else
					    SendClientMessage(playerid, COLOR_RED, "You don't have enough money");
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "You must use values higher than 0");
			}
			else
			    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Respawns the given vehicle
COMMAND:respawnvehicle(playerid, params[])
{
	// Setup local variables
	new vid, Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/respawnvehicle", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			if (sscanf(params, "i", vid)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/respawnvehicle <Vehicle-id>\"");
			else
			{
				// Check if the vehicle-id is valid
				if ((vid > 0) && (vid < 2000))
				{
					// Check if the vehicle exists
					if (AVehicleData[vid][Model] != 0)
					{
					    // Force the vehicle to respawn
						SetVehicleToRespawn(vid);
						// Let the player know he respawned the vehicle
						format(Message, sizeof(Message), "{00FF00}You've respawned vehicle {FFFF00}%i", vid);
						SendClientMessage(playerid, COLOR_WHITE, Message);
					}
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "You have to use a vehicle-id between 1 and 1999");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Creates a spikestrip (can only be used by police players)
COMMAND:createspike(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/createspike", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player if a police player
		if (APlayerData[playerid][PlayerClass] == ClassPolice)
		{
			// Check if the player is on foot
			if (GetPlayerVehicleSeat(playerid) == -1)
			{
				// Try to create a spikestrip
				SpikeStrip_Create(playerid);
			}
			else
			    SendClientMessage(playerid, COLOR_RED, "You must be on foot to place a spikestrip");
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command ejects a player from his vehicle
COMMAND:eject(playerid, params[])
{
	// Setup local variables
	new DriverName[MAX_PLAYER_NAME], Message[128], OtherPlayer, OtherPlayerName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/eject", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "u", OtherPlayer)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/eject <Player>\"");
		else
		{
			// Check if the player trys to eject himself
			if (playerid == OtherPlayer) {
			    // Check if the player is logged in
				if (APlayerData[OtherPlayer][LoggedIn] == true)
				{
					// Check if the player is driving a vehicle
					if (GetPlayerVehicleSeat(playerid) != 0)
					{
						// Check if the other player is in the same vehicle
						if (GetPlayerVehicleID(OtherPlayer) != GetPlayerVehicleID(playerid)) {
							// Get the names of the players
							GetPlayerName(playerid, DriverName, sizeof(DriverName));
							GetPlayerName(OtherPlayer, OtherPlayerName, sizeof(OtherPlayerName));
							// Eject the player from the vehicle
							RemovePlayerFromVehicle(OtherPlayer);
							// Let the player know he's been ejected from his vehicle
							format(Message, sizeof(Message), "You've been ejected from the vehicle by {FFFF00}%s", DriverName);
							SendClientMessage(OtherPlayer, COLOR_RED, Message);
							// Inform the driver that he ejected the player
							format(Message, sizeof(Message), "{00FF00}You've ejected {FFFF00}%s{00FF00} from your vehicle", OtherPlayerName);
							SendClientMessage(playerid, COLOR_WHITE, Message);
						}
						else
							SendClientMessage(playerid, COLOR_RED, "That player is not in your vehicle");
					}
					else
					    SendClientMessage(playerid, COLOR_RED, "You're not the driver of a vehicle");
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't connected");
			}
			else
				SendClientMessage(playerid, COLOR_RED, "You can not eject yourself from the vehicle");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command lets you talk only to players of the same class
COMMAND:radio(playerid, params[])
{
	// Setup local variables
	new Name[MAX_PLAYER_NAME], RadioMessage[128], Message[128], ClassName[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/radio", params);

	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Get the player's class name
	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver: // Truckdriver class
			ClassName = TXT_ClassTrucker;
		case ClassBusDriver: // BusDriver class
			ClassName = TXT_ClassBusDriver;
		case ClassPilot: // Pilot class
			ClassName = TXT_ClassPilot;
		case ClassPolice: // Police class
			ClassName = TXT_ClassPolice;
		case ClassMafia: // Mafia class
			ClassName = TXT_ClassPolice;
		case ClassCourier: // Courier class
			ClassName = TXT_ClassMafia;
		case ClassAssistance: // Assistance class
			ClassName = TXT_ClassAssistance;
		case ClassRoadWorker: // Roadworker class
			ClassName = TXT_ClassCourier;
	}

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "s[128]", RadioMessage)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/radio <Message>\"");
		else
		{
			// Loop through all players
			for (new i; i < MAX_PLAYERS; i++)
			{
			    // Check if the player is logged in
				if (APlayerData[i][LoggedIn] == true)
				{
				    // Check if the other player has the same class
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
						format(Message, sizeof(Message), "{A0A0A0}(%s Chat) {D0D0D0}%s: {FFFFFF}%s", ClassName, Name, RadioMessage);
						SendClientMessage(i, COLOR_WHITE, Message);
				    }
				}
			}
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command lets you talk only to admin players
COMMAND:achat(playerid, params[])
{
	// Setup local variables
	new Name[MAX_PLAYER_NAME], AdminMessage[MAX_STRING_INPUT_TEXT], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/achat", params);

	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is an admin
		if (APlayerData[playerid][PlayerLevel] > 0)
		{
			if (sscanf(params, "s[128]", AdminMessage)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/achat <Message>\"");
			else
			{
				// Loop through all players
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 0)
					    {
							format(Message, sizeof(Message), "{A0A0A0}(Admin Chat) {D0D0D0}%s: {FFFFFF}%s", Name, AdminMessage);
							SendClientMessage(i, COLOR_WHITE, Message);
					    }
					}
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Clamp an owned vehicle (remove it completely)
COMMAND:clamp(playerid, params[])
{
	// Setup local variables
	new vid, Reason[MAX_STRING_INPUT_TEXT], HouseID, HouseOwner, Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/clamp", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5)
		{
			if (sscanf(params, "is[128]", vid, Reason)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/clamp <Vehicle ID> <Reason>\"");
			else
			{
			    // Get the HouseID to which this vehicle belongs
				HouseID = AVehicleData[vid][BelongsToHouse];

				// Check if the vehicle belongs to a house
				if (HouseID != 0)
				{
					//Also set the new location of the vehicle inside the KACC Military fuels hangar
					AVehicleData[vid][SpawnX] = 2585.0;
					AVehicleData[vid][SpawnY] = 2829.0;
					AVehicleData[vid][SpawnZ] = 10.9;
					AVehicleData[vid][SpawnRot] = 0.0;

					// Search all the players to see who owns the house
					for (new i; i < MAX_PLAYERS; i++)
					{
						// Loop through all the houses this player owns
						for(new j; j < MAX_HOUSESPERPLAYER; j++)
						{
						    // Check if the player owns this house
							if (APlayerData[i][Houses][j] == HouseID)
							{
							    // Store the houseowner
							    HouseOwner = i;

								// Find the CarSlot where this vehicle exists
								for (new CarSlot; CarSlot < 10; CarSlot++)
								{
									// Check if the vehicle is stored in this carslot
									if (AHouseData[HouseID][VehicleIDs][CarSlot] == vid)
									{
										vid = House_ReplaceVehicle(HouseID, CarSlot); // Re-create the vehicle at the KACC Military fuels hangar
										// Set the vehicle as clamped (clamping needs to be done after re-creating the vehice, otherwise the wrong id can be clamped)
										AVehicleData[vid][Clamped] = true;
									}
								}

								break;
							}
						}
					}

					// Get the name of the admin and owner of the house
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(HouseOwner, Name, sizeof(Name));

					// Let the admin know who's vehicle he deleted
					format(Message, sizeof(Message), "{00FF00}You've clamped a vehicle that was owned by {FFFF00}%s", Name);
					SendClientMessage(playerid, COLOR_WHITE, Message);
					// Let the player know who deleted his vehicle
					format(Message, sizeof(Message), "A vehicle you owned was clamped by admin {FFFF00}%s", AdminName);
					SendClientMessage(HouseOwner, COLOR_RED, Message);
					format(Message, sizeof(Message), "It belongs to house: {FFFF00}%s", AHouseData[HouseID][HouseName]);
					SendClientMessage(HouseOwner, COLOR_RED, Message);
					format(Message, sizeof(Message), "Reason: {FFFF00}%s", Reason);
					SendClientMessage(HouseOwner, COLOR_RED, Message);
					// Save the player's datafile (and his houses/businesses/vehicles)
					PlayerFile_Save(HouseOwner);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That vehicle doesn't belong to a player, you cannot clamp it");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command can be used to unclamp all your vehicles at once
COMMAND:unclamp(playerid, params[])
{
	// Setup local variables
	new HouseID, vid, ClampedVehicles, UnclampPrice, Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/unclamp", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Loop through all vehicles owned by this player
		for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
		{
			// Get the HouseID that exists on this index
			HouseID = APlayerData[playerid][Houses][HouseSlot];

			// check if this house-slot is used
			if (HouseID != 0)
			{
				// Loop through all vehicles assigned to this house
				for (new CarSlot; CarSlot < 10; CarSlot++)
				{
					// Get the vehicle-id of the vehicle in this carslot
					vid = AHouseData[HouseID][VehicleIDs][CarSlot];

					// Check if this carslot is used
					if (vid != 0)
					{
						// Check if this vehicle is clamped
						if (AVehicleData[vid][Clamped] == true)
						    ClampedVehicles++; // Count the clamped vehicles
					}
				}
			}
		}

		// Check if there were any clamped vehicles
		if (ClampedVehicles > 0)
		{
			// Calculate the price to unclamp all the player's vehicles
			UnclampPrice = ClampedVehicles * UnclampPricePerVehicle;

			// Construct the message to inform the player how many vehicles have been clamped and how much it costs to un-clamp them
			format(Message, sizeof(Message), "You have %i clamped vehicles, it will cost you $%i to unclamp them", ClampedVehicles, UnclampPrice);
		    // Show a dialog that informs the player how many vehicles have been clamped and how much it costs to un-clamp them
			ShowPlayerDialog(playerid, DialogUnclampVehicles, DIALOG_STYLE_MSGBOX, TXT_AreYouSure, Message, "Unclamp", TXT_DialogButtonCancel);
		}
		else
		    SendClientMessage(playerid, COLOR_RED, "You don't have any clamped vehicles");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command displays the rules of the server
COMMAND:rules(playerid, params[])
{
	// Setup local variables
	new Message[2000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/rules", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Construct the rules
		format(Message, sizeof(Message), "%s1. Always drive on the right side of the road\n", Message);
		format(Message, sizeof(Message), "%s2. No flaming or disrespecting other players\n", Message);
		format(Message, sizeof(Message), "%s3. Main language is english\n", Message);
		format(Message, sizeof(Message), "%s4. Don't use any hacks, you'll be banned\n", Message);
		format(Message, sizeof(Message), "%s5. No spamming on the chat\n", Message);
		format(Message, sizeof(Message), "%s6. No car-jacking allowed\n", Message);
	    // Show a dialog that shows the rules
		ShowPlayerDialog(playerid, DialogRules, DIALOG_STYLE_MSGBOX, "Rules of the server:", Message, "Accept", TXT_DialogButtonCancel);
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Report a player for breaking the rules
COMMAND:report(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Name[MAX_PLAYER_NAME], Reason[MAX_STRING_INPUT_TEXT], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/report", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "us[128]", OtherPlayer, Reason)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/report <Player> <Message>\"");
		else
		{
			if (OtherPlayer == playerid)
				return SendClientMessage(playerid, COLOR_RED, "You can't report yourself");

		    // Check if that other player is logged in
		    if (APlayerData[OtherPlayer][LoggedIn] == true)
		    {
				// Send the report to all admins and add the report to the report-list so admins can review it
				SendReportToAdmins(OtherPlayer, Reason);

				// Get the name of the offender
				GetPlayerName(OtherPlayer, Name, sizeof(Name));
				// Let the player know he reported the other player
				format(Message, sizeof(Message), "{00FF00}You've reported {FFFF00}%s", Name);
				SendClientMessage(playerid, COLOR_WHITE, Message);
			}
			else
			    SendClientMessage(playerid, COLOR_RED, "That player isn't connected");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


// Lets the admins see the list of reports
COMMAND:reports(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/reports", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1)
		{
			// Add the first report to the list (if it exists)
			if (AReports[0][ReportUsed] == true)
			    format(ReportList, sizeof(ReportList), "%s: %s\n", AReports[0][ReportName], AReports[0][ReportReason]);
			else
				return SendClientMessage(playerid, COLOR_RED, "There are no reports");

			// Construct the report-dialog
			for (new i = 1; i < 50; i++)
			{
				// Check if the ReportID has been used already
				if (AReports[i][ReportUsed] == true)
				{
				    format(ReportList, sizeof(ReportList), "%s%s: %s\n", ReportList, AReports[i][ReportName], AReports[i][ReportReason]);
				}
			}

			// Show all the reports
			ShowPlayerDialog(playerid, DialogReports, DIALOG_STYLE_LIST, "Reports list:", ReportList, TXT_DialogButtonOk, TXT_DialogButtonCancel);
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Enables the trucker to overload himself
COMMAND:overload(playerid, params[])
{
	// Setup local variables
	new vModel, bool:ValidOverLoad = false, Float:x, Float:y, Float:z, Name[MAX_PLAYER_NAME], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/overload", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the playeris a trucker
		if (APlayerData[playerid][PlayerClass] == ClassTruckDriver)
		{
			// Check if he has already started a job
			if (APlayerData[playerid][JobStarted] == true)
			{
				// Check if the player has already loaded his load
				if (APlayerData[playerid][JobStep] == 2)
				{
					// Check if the player isn't overloaded already
					if (APlayerData[playerid][Overloaded] == false)
					{
						// Get the coordinates of the loading point
						x = ALocations[APlayerData[playerid][JobLoc1]][LocX];
						y = ALocations[APlayerData[playerid][JobLoc1]][LocY];
						z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];

					    // Check if the player is still near the loading point
					    if (IsPlayerInRangeOfPoint(playerid, 25.0, x, y, z))
					    {
							// Get the vehicle-model of the player's vehicle
							vModel = GetVehicleModel(APlayerData[playerid][VehicleID]);

							// Check if the trucker is driving a trucking vehicle that can be overloaded
							switch (vModel)
							{
								case VehicleFlatbed, VehicleDFT30: ValidOverLoad = true; // Flatbed and DFT-30 can be overloaded
								case VehicleLineRunner, VehicleTanker, VehicleRoadTrain:
								{
									switch (GetVehicleModel(APlayerData[playerid][TrailerID]))
									{
										case VehicleTrailerCargo, VehicleTrailerCargo2, VehicleTrailerOre: ValidOverLoad = true; // Cargo and ore trailer can be overloaded
									}
								}
							}

							// Check if the vehicle is valid for overloading
							if (ValidOverLoad == true)
							{
								// Set overloaded for this player to True
							    APlayerData[playerid][Overloaded] = true;
							    // Add 2 to the player's wanted level
							    SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 2);
							    // Let the player know he has been overloaded now
							    SendClientMessage(playerid, COLOR_YELLOW, "You have overloaded your truck, watch out for the police");
								// Inform the police this trucker is overloaded
								GetPlayerName(playerid, Name, sizeof(Name));
								format(Message, sizeof(Message), "{00FF00}Trucker {FFFF00}%s{00FF00} is overloaded, pursue and fine him", Name);
								Police_SendMessage(Message);
							}
							else
							    SendClientMessage(playerid, COLOR_RED, "Your vehicle cannot be overloaded");
						}
						else
						    SendClientMessage(playerid, COLOR_RED, "You must be near the loading point to overload your truck");
					}
					else
					    SendClientMessage(playerid, COLOR_RED, "You are overloaded already");
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "You must load your truck first");
			}
			else
			    SendClientMessage(playerid, COLOR_RED, "You haven't started a job yet");
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command resets a player's money, score and stats to 0 (if chosen)
COMMAND:resetplayer(playerid, params[])
{
	// Setup local variables
	new Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME], Reason[MAX_STRING_INPUT_TEXT], Message[128], OtherPlayer, ClearMoney, ClearScore, ClearStats;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/resetplayer", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5)
		{
			if (sscanf(params, "uiiis[128]", OtherPlayer, ClearMoney, ClearScore, ClearStats, Reason)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/resetplayer <Player> <Money (0/1)> <Score (0/1)> <Stats (0/1)> <Reason>\"");
			else
			{
			    // Check if the other player is logged in
				if (APlayerData[OtherPlayer][LoggedIn] == true)
				{
					// Check if there is at least one parameter given to be cleared, otherwise exit the command
					if ((ClearMoney + ClearScore + ClearStats) == 0)
						return 1;

					// Get the names of both players
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));

					// Reset the other player's money to 0
					if (ClearMoney == 1)
					{
						APlayerData[OtherPlayer][PlayerMoney] = 0;
						format(Message, sizeof(Message), "Your money has been reset by {FFFF00}%s", AdminName);
						SendClientMessage(OtherPlayer, COLOR_RED, Message);
						format(Message, sizeof(Message), "{00FF00}You've reset the money of player {FFFF00}%s", Name);
						SendClientMessage(playerid, COLOR_WHITE, Message);
					}

					// Reset the other player's score to 0
					if (ClearScore == 1)
					{
						APlayerData[OtherPlayer][PlayerScore] = 0;
						format(Message, sizeof(Message), "Your score has been reset by {FFFF00}%s", AdminName);
						SendClientMessage(OtherPlayer, COLOR_RED, Message);
						format(Message, sizeof(Message), "{00FF00}You've reset the score of player {FFFF00}%s", Name);
						SendClientMessage(playerid, COLOR_WHITE, Message);
					}

					// Reset the other player's stats to 0
					if (ClearStats == 1)
					{
						APlayerData[OtherPlayer][StatsTruckerJobs] = 0;
						APlayerData[OtherPlayer][StatsConvoyJobs] = 0;
						APlayerData[OtherPlayer][StatsBusDriverJobs] = 0;
						APlayerData[OtherPlayer][StatsPilotJobs] = 0;
						APlayerData[OtherPlayer][StatsMafiaJobs] = 0;
						APlayerData[OtherPlayer][StatsMafiaStolen] = 0;
						APlayerData[OtherPlayer][StatsPoliceFined] = 0;
						APlayerData[OtherPlayer][StatsPoliceJailed] = 0;
						APlayerData[OtherPlayer][StatsCourierJobs] = 0;
						APlayerData[OtherPlayer][StatsAssistance] = 0;
						APlayerData[OtherPlayer][StatsRoadworkerJobs] = 0;
						APlayerData[OtherPlayer][StatsMetersDriven] = 0.0;
						format(Message, sizeof(Message), "Your stats have been reset by {FFFF00}%s", AdminName);
						SendClientMessage(OtherPlayer, COLOR_RED, Message);
						format(Message, sizeof(Message), "{00FF00}You've reset the stats of player {FFFF00}%s", Name);
						SendClientMessage(playerid, COLOR_WHITE, Message);
					}

					// Let the other player know the reason too
					format(Message, sizeof(Message), "Reason: {FFFF00}%s", Reason);
					SendClientMessage(OtherPlayer, COLOR_RED, Message);

					// Save the other player's account
					PlayerFile_Save(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't connected");
			}
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command searches every house and business that the player owns and restores the data for it in the player's account
COMMAND:fixplayer(playerid, params[])
{
	// Setup local variables
	new Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME], Message[128], OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/fixplayer", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5)
		{
			if (sscanf(params, "u", OtherPlayer)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/fixplayer <Player>\"");
			else
			{
			    // Check if the other player is logged in
				if (APlayerData[OtherPlayer][LoggedIn] == true)
				{
					// Get the names of both players
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));

					// Clear the houses and businesses that the player owns right now
					for (new i; i < MAX_HOUSESPERPLAYER; i++)
					    APlayerData[OtherPlayer][Houses][i] = 0;

					for (new i; i < MAX_BUSINESSPERPLAYER; i++)
					    APlayerData[OtherPlayer][Business][i] = 0;

					// Now search through all houses and re-add them to the player
					for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
						if (AHouseData[HouseID][Owned] == true) // Check if the house is owned by somebody
							if (strcmp(AHouseData[HouseID][Owner], Name, false) == 0) // Check if the player is the owner of the house
							{
								for (new i; i < MAX_HOUSESPERPLAYER; i++) // Loop through all houses the player owns
								    if (APlayerData[OtherPlayer][Houses][i] == 0) // Check if the houseslot is free
								    {
										APlayerData[OtherPlayer][Houses][i] = HouseID; // Store the HouseID
										break; // Stop searching for more free slots
								    }
							}

					// Now search through all businesses and re-add them to the player
					for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
						if (ABusinessData[BusID][Owned] == true) // Check if the business is owner by someone
							if (strcmp(ABusinessData[BusID][Owner], Name, false) == 0) // Check if the player is the owner of the business
							{
								for (new i; i < MAX_BUSINESSPERPLAYER; i++) // Loop through all businesses the player owns
								    if (APlayerData[OtherPlayer][Business][i] == 0) // Check if the businessslot is free
								    {
										APlayerData[OtherPlayer][Business][i] = BusID; // Store the BusID
										break; // Stop searching for more free slots
								    }
							}

					// Let the other player know his property has been restored
					format(Message, sizeof(Message), "{00FF00}Your property has been restored by: {FFFF00}%s", AdminName);
					SendClientMessage(OtherPlayer, COLOR_WHITE, Message);

					// Save the other player's account
					PlayerFile_Save(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't connected");
			}
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command sets a skin for a player
COMMAND:setskin(playerid, params[])
{
	// Setup local variables
	new Message[128], AdminName[MAX_PLAYER_NAME], OtherName[MAX_PLAYER_NAME], OtherPlayer, Skin;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setskin", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 4
		if (APlayerData[playerid][PlayerLevel] >= 4)
		{
			if (sscanf(params, "ui", OtherPlayer, Skin)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/setskin <Player> <Skin ID (0-299)>\"");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Check if the player entered a valid skin-id
					if ((Skin >= 0) && (Skin <= 299))
					{
					    // Set the skin for the player
					    SetPlayerSkin(OtherPlayer, Skin);

						// Get the name of the admin and the other player
						GetPlayerName(playerid, AdminName, sizeof(AdminName));
						GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));

						// Let the admin know who he changed the skin for
						format(Message, sizeof(Message), "You've changed the skin for {FFFF00}%s {00FF00}to {FFFF00}%i", OtherName, Skin);
						SendClientMessage(playerid, COLOR_GREEN, Message);

						// Let the other player know about his new outfit
						format(Message, sizeof(Message), "Your skin has been changed by admin {FFFF00}%s {00FF00}to {FFFF00}%i", AdminName, Skin);
						SendClientMessage(OtherPlayer, COLOR_GREEN, Message);
					}
					else
						SendClientMessage(playerid, COLOR_RED, "Invalid skin-id, you can only use skins 0-299");
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Bans a player by his ip
COMMAND:ipban(playerid, params[])
{
	// Setup local variables
	new PlayerToBan, Reason[MAX_STRING_INPUT_TEXT], Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/ipban", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3)
		{
			if (sscanf(params, "us[128]", PlayerToBan, Reason))
				SendClientMessage(playerid, COLOR_RED, "Usage: \"/ipban <Player> <Reason>\"");
			else
			{
				if (IsPlayerConnected(PlayerToBan))
				{
					// Get the names of the player and the admin who executed the ban
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(PlayerToBan, Name, sizeof(Name));

					// Inform the player about his ban
					format(Message, sizeof(Message), "You have been ip-banned permanently by {FFFF00}%s", AdminName);
					SendClientMessage(PlayerToBan, COLOR_RED, Message);
					format(Message, sizeof(Message), "Reason: {FFFF00}%s", Reason);
					SendClientMessage(PlayerToBan, COLOR_RED, Message);

					// Ban the player with a reason
					SetTimerEx("TimedBanEx", (750 + GetPlayerPing(PlayerToBan)), false, "is", PlayerToBan, Reason);

					// Inform everybody else which player was ip-banned
					format(Message, sizeof(Message), "{808080}%s %s has ip-banned {FFFF00}%s", AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName, Name);
					SendClientMessageToAll(COLOR_WHITE, Message);
				}
				else
					SendClientMessage(playerid, COLOR_RED, "That player isn't connected");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// Bans a player's entire range of IP addresses (the last part of the IP-address will be from 0 to 255)
COMMAND:rangeban(playerid, params[])
{
	// Setup local variables
	new PlayerToBan, PlayerIP[16], FirstPartsOfIP[16], BanCmd[24], Reason[MAX_STRING_INPUT_TEXT], Message[128], Name[MAX_PLAYER_NAME], AdminName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/rangeban", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3)
		{
			if (sscanf(params, "us[128]", PlayerToBan, Reason))
				SendClientMessage(playerid, COLOR_RED, "Usage: \"/rangeban <Player> <Reason>\"");
			else
			{
				if (IsPlayerConnected(PlayerToBan))
				{
					// Get the names of the player and the admin who executed the ban
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(PlayerToBan, Name, sizeof(Name));

					// Get the player's IP-address
					GetPlayerIp(PlayerToBan, PlayerIP, 16);

					// Inform the player about his ban
					format(Message, sizeof(Message), "You have been ip-range-banned permanently by {FFFF00}%s", AdminName);
					SendClientMessage(PlayerToBan, COLOR_RED, Message);
					format(Message, sizeof(Message), "Reason: {FFFF00}%s", Reason);
					SendClientMessage(PlayerToBan, COLOR_RED, Message);

					// Get the first three digits from the player's ip, so the fourth part can be added from 0 to 255
					FirstPartsOfIP = GetFirstThreeDigitsFromIP(PlayerIP);
					// Ban the entire range of IP-addresses of the player
					for (new i; i < 256; i++)
					{
					    format(BanCmd, sizeof(BanCmd), "banip %s%i", FirstPartsOfIP, i); // Construct the RCon command to ban every IP
                        SendRconCommand(BanCmd); // Execute the command
					}
					// Finally kick the player (the RCon command doesn't kick you out automatically)
					SetTimerEx("TimedKick", (750 + GetPlayerPing(PlayerToBan)), false, "i", PlayerToBan);

					// Inform everybody else which player was ip-range-banned
					format(Message, sizeof(Message), "%s %s has ip-range-banned {FFFF00}%s", AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName, Name);
					SendClientMessageToAll(COLOR_GRAY, Message);
				}
				else
					SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// Sets the score of another player
COMMAND:setscore(playerid, params[])
{
	// Setup local variables
	new Message[128], Name[MAX_PLAYER_NAME], OtherName[MAX_PLAYER_NAME], OtherPlayer, pScore;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setscore", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3)
		{
			if (sscanf(params, "ui", OtherPlayer, pScore)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/setscore <Player> <Amount>\"");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the player-names
					GetPlayerName(playerid, Name, sizeof(Name));
					GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));

					// Set the other player's score
					APlayerData[OtherPlayer][PlayerScore] = pScore;
					// Let the other player know that his score has been changed
					format(Message, sizeof(Message), "{00FF00}Your score has been set to {FFFF00}%i{00FF00} by {FFFF00}%s", pScore, Name);
					SendClientMessage(OtherPlayer, COLOR_WHITE, Message);
					// Let the player know he has set the score of the other player
					format(Message, sizeof(Message), "{00FF00}You've set the score of {FFFF00}%s{00FF00} to {FFFF00}%i", OtherName, pScore);
					SendClientMessage(playerid, COLOR_WHITE, Message);
					// Save the other player's account
					PlayerFile_Save(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Sets the money of another player
COMMAND:setcash(playerid, params[])
{
	// Setup local variables
	new Message[128], Name[MAX_PLAYER_NAME], OtherName[MAX_PLAYER_NAME], OtherPlayer, pMoney;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setcash", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3)
		{
			if (sscanf(params, "ui", OtherPlayer, pMoney)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/setcash <Player> <Amount>\"");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the player-names
					GetPlayerName(playerid, Name, sizeof(Name));
					GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));

					// Set the other player's money
					APlayerData[OtherPlayer][PlayerMoney] = pMoney;
					// Let the other player know that his money has been changed
					format(Message, sizeof(Message), "{00FF00}Your cash has been set to {FFFF00}%i{00FF00} by {FFFF00}%s", pMoney, Name);
					SendClientMessage(OtherPlayer, COLOR_WHITE, Message);
					// Let the player know he has set the money of the other player
					format(Message, sizeof(Message), "{00FF00}You've set the cash of {FFFF00}%s{00FF00} to {FFFF00}%i", OtherName, pMoney);
					SendClientMessage(playerid, COLOR_WHITE, Message);
					// Save the other player's account
					PlayerFile_Save(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Allows the player to setup a bank account, login to his bank account, or use his bank account after he logged in to his bank account
COMMAND:bank(playerid, params[])
{
	// Setup local variables
	new file[100], Name[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/bank", params);

    // Get the playername
	format(Name, sizeof(Name), APlayerData[playerid][PlayerName]);
	// Construct the complete filename for this player's bank-account
	format(file, sizeof(file), BankFile, Name);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player doesn't have a bank account
		if (!fexist(file))
		{
			// Ask for a password to setup his bank account
			ShowPlayerDialog(playerid, DialogBankPasswordRegister, DIALOG_STYLE_PASSWORD, "Enter password", "Please enter a password to register your bank account:", TXT_DialogButtonSelect, TXT_DialogButtonCancel);
		}
		else // The player has a bank account
		{
			// If the player hasn't logged in to his bank account yet
			if (APlayerData[playerid][BankLoggedIn] == false)
			{
				// Ask for the password to login to his bank account
				ShowPlayerDialog(playerid, DialogBankPasswordLogin, DIALOG_STYLE_PASSWORD, "Enter password", "Please enter your password to login to your bank account:", TXT_DialogButtonSelect, TXT_DialogButtonCancel);
			}
			else // The player has logged in to his bank account already
			{
			    // Show the main bank menu dialog
				ShowBankMenu(playerid);
			}
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command lists all help-items for which the player can get information about it
COMMAND:help(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/help", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Create the dialog that lists all help-items
        HelpList_Create(playerid);
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command allows you to change your password for logging in
COMMAND:changepassword(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/changepassword", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Show the dialog where the player must enter his old password
		ShowPlayerDialog(playerid, DialogOldPassword, DIALOG_STYLE_PASSWORD, "Enter old password:", "Enter your old password here:", TXT_DialogButtonOk, TXT_DialogButtonCancel);
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command opens a menu where you can choose neons lights for your vehicle
COMMAND:neon(playerid, params[])
{
	// Setup local variables
	new OptionsList[200], DialogTitle[200];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/neon", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is the driver of a vehicle
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			format(DialogTitle, sizeof(DialogTitle), "Select neon lights:");

			format(OptionsList, sizeof(OptionsList), "%sPolice lights\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sRed lights\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sBlue lights\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sGreen lights\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sYellow lights\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sPink lights\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sWhite lights\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sRemove neons\n", OptionsList);
			// Show the neon menu
			ShowPlayerDialog(playerid, DialogNeon, DIALOG_STYLE_LIST, DialogTitle, OptionsList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
		}
		else
		    SendClientMessage(playerid, COLOR_RED, "You're not the driver of a vehicle");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command shows the current bonus mission
COMMAND:bonus(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/bonus", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is a trucker
		if (APlayerData[playerid][PlayerClass] == ClassTruckDriver)
			ShowRandomBonusMission(); // Show the bonus mission again for all truckers (and perhaps generate a new one)
		else
		    return SendClientMessage(playerid, COLOR_RED, "You are not a truck driver!");
	}
	else
	    return SendClientMessage(playerid, COLOR_RED, "You must login before using this command");

	// Let the server know that this was a valid command
	return 1;
}

// This command gives a truckers license to a player
COMMAND:givelicense(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Message[128], Name[MAX_PLAYER_NAME], OtherName[MAX_PLAYER_NAME];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/givelicense", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3)
		{
			if (sscanf(params, "u", OtherPlayer)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/givelicense <Player>\"");
			else
			{
			    // Check if the other player is logged in
			    if (APlayerData[OtherPlayer][LoggedIn] == true)
			    {
			    	if (1 == APlayerData[OtherPlayer][TruckerLicense])
			    		return SendClientMessage(playerid, COLOR_RED, "That player has already a trucker license");

					// Get the admin's name
					GetPlayerName(playerid, Name, sizeof(Name));
					// Get the other player's name
					GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));
					// Give the other player a truckers license
					APlayerData[OtherPlayer][TruckerLicense] = 1;

					// Save the player-file (and his houses)
					PlayerFile_Save(OtherPlayer);

					// Inform the admin that you've given a player a truckers license
					format(Message, sizeof(Message), "{00FF00}You've given {FFFF00}%s{00FF00} a trucker's license", OtherName);
					SendClientMessage(playerid, COLOR_WHITE, Message);
					// Inform the player that he received a free truckers license from an admin
					format(Message, sizeof(Message), "{00FF00}You've been given a free trucker's license by {FFFF00}%s", Name);
					SendClientMessage(OtherPlayer, COLOR_WHITE, Message);
				}
				else
				    SendClientMessage(playerid, COLOR_RED, "That player isn't logged in");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
//This command let the admins to send an announce message
COMMAND:announce(playerid, params[])
{
	// Setup local variabiles
	new Message[64], Style, DisplayTime;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/announce", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 2
		if(APlayerData[playerid][PlayerLevel] >= 2)
		{
			if(sscanf(params, "iis[64]", Style, DisplayTime, Message)) SendClientMessage(playerid, COLOR_RED, "Usage: \"/announce <Style (0-6)> <Time in seconds 1-5> <Message>\"");
			else
			{
				if ((Style >= 1) && (Style <= 6) && (Style != 2))
				{
					if ((DisplayTime >= 1) && (DisplayTime <= 5))
					{
						GameTextForAll(Message, (DisplayTime * 1000), Style);
					}
					else
						SendClientMessage(playerid, COLOR_RED, "Invalid time, you can only use 1-5 seconds.");
				}
				else
    				SendClientMessage(playerid, COLOR_RED, "Invalid style, you can only use styles 1-6 except 2.");
			}
		}
		else
			return 0;
	}
	return 1;
}

// Let admins to refuel all player vehicles
COMMAND:fuelall(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/fuelall", params);

	// Check if the player has logged in
	if(APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if(APlayerData[playerid][PlayerLevel] >= 3)
		{
			// Loop through all vehicles
			for(new vid = 0; vid < MAX_VEHICLES; vid++)
			{
				// Check if the vehicle exists
				if (AVehicleData[vid][Model] != 0) {
  					AVehicleData[vid][Fuel] = MaxFuel;
				}
			}

			// Let all players know about it
			SendClientMessageToAll(COLOR_GREEN, "All vehicles have been refueled");
		}
		else
			return 0;
	}
	// Let the server know that this was a valid command
	return 1;
}
